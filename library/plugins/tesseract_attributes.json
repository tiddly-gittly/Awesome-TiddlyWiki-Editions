{"type":"application/json","text":"{\n    \"tiddlers\": {\n        \"$:/core/modules/widgets/button.js\": {\n            \"created\": \"20180217160846218\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/widgets/button.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nButton widget\\n\\n\\\\*/\\n(function() {\\n    /*jslint node: true, browser: true */\\n    /*global $tw: false */\\n    'use strict';\\n\\n    var Widget = require('$:/core/modules/widgets/widget.js').widget;\\n\\n    var ButtonWidget = function(parseTreeNode, options) {\\n        this.initialise(parseTreeNode, options);\\n    };\\n\\n    /*\\n    Inherit from the base widget class\\n    */\\n    ButtonWidget.prototype = new Widget();\\n\\n    /*\\n    Render this widget into the DOM\\n    */\\n    ButtonWidget.prototype.render = function(parent, nextSibling) {\\n        var self = this;\\n        // Remember parent\\n        this.parentDomNode = parent;\\n        // Compute attributes and execute state\\n        this.computeAttributes();\\n        this.execute();\\n        // Create element\\n        var tag = 'button';\\n        if (\\n            this.buttonTag &&\\n            $tw.config.htmlUnsafeElements.indexOf(this.buttonTag) === -1\\n        ) {\\n            tag = this.buttonTag;\\n        }\\n        var domNode = this.document.createElement(tag);\\n        // Assign classes\\n        var classes = this['class'].split(' ') || [],\\n            isPoppedUp = this.popup && this.isPoppedUp();\\n        if (this.selectedClass) {\\n            if (this.set && this.setTo && this.isSelected()) {\\n                $tw.utils.pushTop(classes, this.selectedClass.split(' '));\\n            }\\n            if (isPoppedUp) {\\n                $tw.utils.pushTop(classes, this.selectedClass.split(' '));\\n            }\\n        }\\n        if (isPoppedUp) {\\n            $tw.utils.pushTop(classes, 'tc-popup-handle');\\n        }\\n        domNode.className = classes.join(' ');\\n        // Assign other attributes\\n        if (this.buttonAttributesTiddlerName) {\\n            var buttonAttributes = $tw.wiki.getTiddlerData(\\n                this.buttonAttributesTiddlerName,\\n                {}\\n            );\\n            Object.keys(buttonAttributes).forEach(function(key) {\\n                if (key == \\\"actions\\\") {\\n                    self.actionsattr = buttonAttributes[key];\\n                } else {\\n                    domNode.setAttribute(key, buttonAttributes[key]);\\n                }\\n            });\\n        }\\n        if (this.style) {\\n            domNode.setAttribute('style', this.style);\\n        }\\n        if (this.tooltip) {\\n            domNode.setAttribute('title', this.tooltip);\\n        }\\n        if (this['aria-label']) {\\n            domNode.setAttribute('aria-label', this['aria-label']);\\n        }\\n        // Add a click event handler\\n        domNode.addEventListener(\\n            'click',\\n            function(event) {\\n                var handled = false;\\n                if (self.invokeActions(this, event)) {\\n                    handled = true;\\n                }\\n                if (self.to) {\\n                    self.navigateTo(event);\\n                    handled = true;\\n                }\\n                if (self.message) {\\n                    self.dispatchMessage(event);\\n                    handled = true;\\n                }\\n                if (self.popup) {\\n                    self.triggerPopup(event);\\n                    handled = true;\\n                }\\n                if (self.set) {\\n                    self.setTiddler();\\n                    handled = true;\\n                }\\n                if (self.actions) {\\n                    self.invokeActionString(self.actions, self, event);\\n                }\\n                if (self.actionsattr) {\\n                    self.invokeActionString(self.actionsattr, self, event);\\n                }\\n                if (handled) {\\n                    event.preventDefault();\\n                    event.stopPropagation();\\n                }\\n                return handled;\\n            },\\n            false\\n        );\\n        // Make it draggable if required\\n        if (this.dragTiddler || this.dragFilter) {\\n            $tw.utils.makeDraggable({\\n                domNode: domNode,\\n                dragTiddlerFn: function() {\\n                    return self.dragTiddler;\\n                },\\n                dragFilterFn: function() {\\n                    return self.dragFilter;\\n                },\\n                widget: this,\\n            });\\n        }\\n        // Insert element\\n        parent.insertBefore(domNode, nextSibling);\\n        this.renderChildren(domNode, null);\\n        this.domNodes.push(domNode);\\n    };\\n\\n    /*\\n    We don't allow actions to propagate because we trigger actions ourselves\\n    */\\n    ButtonWidget.prototype.allowActionPropagation = function() {\\n        return false;\\n    };\\n\\n    ButtonWidget.prototype.getBoundingClientRect = function() {\\n        return this.domNodes[0].getBoundingClientRect();\\n    };\\n\\n    ButtonWidget.prototype.isSelected = function() {\\n        return (\\n            this.wiki.getTextReference(\\n                this.set,\\n                this.defaultSetValue,\\n                this.getVariable('currentTiddler')\\n            ) === this.setTo\\n        );\\n    };\\n\\n    ButtonWidget.prototype.isPoppedUp = function() {\\n        var tiddler = this.wiki.getTiddler(this.popup);\\n        var result =\\n            tiddler && tiddler.fields.text\\n                ? $tw.popup.readPopupState(tiddler.fields.text)\\n                : false;\\n        return result;\\n    };\\n\\n    ButtonWidget.prototype.navigateTo = function(event) {\\n        var bounds = this.getBoundingClientRect();\\n        this.dispatchEvent({\\n            type: 'tm-navigate',\\n            navigateTo: this.to,\\n            navigateFromTitle: this.getVariable('storyTiddler'),\\n            navigateFromNode: this,\\n            navigateFromClientRect: {\\n                top: bounds.top,\\n                left: bounds.left,\\n                width: bounds.width,\\n                right: bounds.right,\\n                bottom: bounds.bottom,\\n                height: bounds.height,\\n            },\\n            navigateSuppressNavigation:\\n                event.metaKey || event.ctrlKey || event.button === 1,\\n            event: event,\\n        });\\n    };\\n\\n    ButtonWidget.prototype.dispatchMessage = function(event) {\\n        this.dispatchEvent({\\n            type: this.message,\\n            param: this.param,\\n            tiddlerTitle: this.getVariable('currentTiddler'),\\n            event: event,\\n        });\\n    };\\n\\n    ButtonWidget.prototype.triggerPopup = function(event) {\\n        $tw.popup.triggerPopup({\\n            domNode: this.domNodes[0],\\n            title: this.popup,\\n            wiki: this.wiki,\\n        });\\n    };\\n\\n    ButtonWidget.prototype.setTiddler = function() {\\n        this.wiki.setTextReference(\\n            this.set,\\n            this.setTo,\\n            this.getVariable('currentTiddler')\\n        );\\n    };\\n\\n    /*\\n    Compute the internal state of the widget\\n    */\\n    ButtonWidget.prototype.execute = function() {\\n        // Get attributes\\n        this.actions = this.getAttribute('actions');\\n        this.to = this.getAttribute('to');\\n        this.message = this.getAttribute('message');\\n        this.param = this.getAttribute('param');\\n        this.set = this.getAttribute('set');\\n        this.setTo = this.getAttribute('setTo');\\n        this.popup = this.getAttribute('popup');\\n        this.hover = this.getAttribute('hover');\\n        this['class'] = this.getAttribute('class', '');\\n        this['aria-label'] = this.getAttribute('aria-label');\\n        this.tooltip = this.getAttribute('tooltip');\\n        this.style = this.getAttribute('style');\\n        this.selectedClass = this.getAttribute('selectedClass');\\n        this.defaultSetValue = this.getAttribute('default', '');\\n        this.buttonTag = this.getAttribute('tag');\\n        this.dragTiddler = this.getAttribute('dragTiddler');\\n        this.dragFilter = this.getAttribute('dragFilter');\\n        this.buttonAttributesTiddlerName = this.getAttribute('attributes');\\n\\n        // Make child widgets\\n        this.makeChildWidgets();\\n    };\\n\\n    /*\\n    Selectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n    */\\n    ButtonWidget.prototype.refresh = function(changedTiddlers) {\\n        var changedAttributes = this.computeAttributes();\\n        if (\\n            changedAttributes.to ||\\n            changedAttributes.message ||\\n            changedAttributes.param ||\\n            changedAttributes.set ||\\n            changedAttributes.setTo ||\\n            changedAttributes.popup ||\\n            changedAttributes.hover ||\\n            changedAttributes['class'] ||\\n            changedAttributes.selectedClass ||\\n            changedAttributes.style ||\\n            changedAttributes.dragFilter ||\\n            changedAttributes.dragTiddler ||\\n            (this.set && changedTiddlers[this.set]) ||\\n            (this.popup && changedTiddlers[this.popup]) ||\\n            (this.buttonAttributesTiddlerName &&\\n                changedTiddlers[this.buttonAttributesTiddlerName])\\n        ) {\\n            this.refreshSelf();\\n            return true;\\n        }\\n        return this.refreshChildren(changedTiddlers);\\n    };\\n\\n    exports.button = ButtonWidget;\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"title\": \"$:/core/modules/widgets/button.js\",\n            \"module-type\": \"widget\",\n            \"modified\": \"20180305152618986\"\n        },\n        \"$:/plugins/tesseract/attributes/Readme\": {\n            \"created\": \"20180217164449208\",\n            \"text\": \"\\n|!Name |!Description |\\n|attributes |A data-dictionary tiddler or JSON tiddler holding the attributes of the button that will be copied to the HTML ''as is'' |\\n\\n\\n\\n!!! Example 1:\\n\\n```\\n<$button attributes=\\\"MyButtonAttributes\\\">Press me!</$button>\\n```\\n\\nand create a data-tiddler \\\"MyButtonAttributes\\\" with following content.\\n\\n```\\nstyle: color:blue; border: 1px solid wheat;\\nclass: tc-btn-invisible\\nonclick: alert(\\\"hmm, that seems to have worked\\\")\\n```\\n\\nrenders as:\\n\\n <$button attributes=\\\"MyButtonAttributes\\\">Press me!</$button>\\n\\n\\n\\n\\n!!! Example 2:\\n\\n```\\n<$button attributes=\\\"MyButtonAttributes2\\\">You cannot press me!</$button>\\n```\\n\\nand create a data-tiddler \\\"MyButtonAttributes2\\\" with following content.\\n\\n```\\ndisabled: true\\n```\\n\\nrenders as:\\n\\n<$button attributes=\\\"MyButtonAttributes2\\\">You cannot press me!</$button>\\n\\n\\n!!! Example 3:\\n\\n```\\n<$button attributes=\\\"MyButtonAttributesJSON\\\">Double Click me!</$button>\\n```\\n\\nand create a JSON-tiddler \\\"MyButtonAttributesJSON\\\" with following content.\\n\\n```\\n{\\n\\\"style\\\": \\\"color:red;\\\",\\n\\\"ondblclick\\\": \\\"confirm(\\\\\\\"Hello! I am an confirm box!\\\\\\\");\\\"\\n}\\n```\\n\\nrenders as:\\n\\n <$button attributes=\\\"MyButtonAttributesJSON\\\">Double Click me!</$button>\",\n            \"title\": \"$:/plugins/tesseract/attributes/Readme\",\n            \"tags\": \"\",\n            \"modified\": \"20180217173916349\"\n        }\n    }\n}","author":"Riz","description":"Attributes: Add attributes to your button widgets","list":"Readme","plugin-type":"plugin","title":"$:/plugins/tesseract/attributes","version":"0.6.7","name":"attributes"}