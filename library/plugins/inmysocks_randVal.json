{"title":"$:/plugins/inmysocks/randVal","description":"A random number generator for TW5","author":"inmysocks","version":"0.1.3","core-version":">=5.0.8","source":"https://github.com/inmysocks/TW5-randVal","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\n    \"tiddlers\": {\n        \"$:/plugins/inmysocks/randVal/action-randval.js\": {\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/inmysocks/randVal/action-randval.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nAction widget to set a single field or index on a tiddler to a random number.\\n\\n<$action-randval $tiddler=someTiddler $field=store_field $lower=1 $upper=6 $step=1/>\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar RandValWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nRandValWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nRandValWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nRandValWidget.prototype.execute = function() {\\n\\tthis.actionTiddler = this.getAttribute(\\\"$tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\tthis.actionField = this.getAttribute(\\\"$field\\\",\\\"store_field\\\");\\n\\tthis.actionIndex = this.getAttribute(\\\"$index\\\");\\n\\tthis.padLength = this.getAttribute(\\\"$length\\\",\\\"0\\\");\\n\\tthis.prefixValue = this.getAttribute(\\\"$prefix\\\")\\n\\n\\tvar numrolls = this.getAttribute(\\\"$numrolls\\\",1);\\t\\n\\tvar lower = this.getAttribute(\\\"$lower\\\",1);\\n\\tvar upper = this.getAttribute(\\\"$upper\\\",6);\\n\\tvar step = this.getAttribute(\\\"$step\\\",1);\\n\\tvar randValue;\\n\\tvar output;\\n\\t\\n\\tif(numrolls===0) {\\n\\t\\trandValue = 0;\\n\\t} else {\\n\\t\\tvar numpts = ((upper)-(lower))/(step)+1;\\n\\t\\tvar size = (upper)-(lower);\\n\\t\\tif(numpts <= 1) {\\n\\t\\t  randValue = Number(numrolls*lower);\\n\\t\\t} else {\\n\\t\\t\\tvar randValue = 0;\\n\\t\\t\\tfor (var i = 0; i < Number(numrolls); i++) {\\n\\t\\t\\t  randValue = Number(randValue) + (Math.floor(Math.random()*numpts)*(step)+Number(lower));\\n\\t\\t\\t}\\n\\t\\t  if(Number(randValue) > Number(numrolls)*Number(upper)) {\\n\\t\\t    randValue = Number(numrolls*upper);\\n\\t\\t  }\\n\\t\\t} \\n\\t}\\n\\n\\tif(this.prefixValue) {\\n\\t\\tif(this.padLength) {\\n\\t\\t\\toutput = this.prefixValue+$tw.utils.pad(randValue,this.padLength);\\n\\t\\t} else {\\n\\t\\t\\toutput = this.prefixValue+randValue;\\n\\t\\t}\\n\\t} else if(this.padLength) {\\n\\t\\t\\toutput = $tw.utils.pad(randValue,this.padLength);\\n\\t} else {\\n\\t\\t\\toutput = randValue;\\n\\t}\\n\\n\\tthis.actionValue = String(output);\\n};\\n\\n/*\\nRefresh the widget by ensuring our attributes are up to date\\n*/\\nRandValWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes[\\\"$tiddler\\\"] || changedAttributes[\\\"$field\\\"] || changedAttributes[\\\"$index\\\"] || changedAttributes[\\\"$lower\\\"] || changedAttributes[\\\"$upper\\\"] || changedAttributes[\\\"$step\\\"] || changedAttributes[\\\"$numrolls\\\"]) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\n/*\\nInvoke the action associated with this widget\\n*/\\nRandValWidget.prototype.invokeAction = function(triggeringWidget,event) {\\n\\tvar self = this;\\n\\tif(typeof this.actionValue === \\\"string\\\") {\\n\\t\\tthis.wiki.setText(this.actionTiddler,this.actionField,this.actionIndex,this.actionValue);\\t\\t\\n\\t}\\n\\treturn true; // Action was invoked\\n};\\n\\nexports[\\\"action-randval\\\"] = RandValWidget;\\n\\n})();\\n\",\n            \"title\": \"$:/plugins/inmysocks/randVal/action-randval.js\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"widget\"\n        },\n        \"$:/plugins/inmysocks/randVal/readme\": {\n            \"title\": \"$:/plugins/inmysocks/randVal/readme\",\n            \"text\": \"This plugin contains a widget that generates a random number and stores it in a specified field.\\n\\nThe Widget will take the following inputs\\n\\n|!Attribute |!Description |\\n|$lower |The lower bound of the random numbers generated, defaults to 1. |\\n|$upper |The upper bound on the random numbers generated, defaults to 6. |\\n|$step |The step size of the random numbers generated (that is all random numbers will be in the form rand = lowerBound+n*stepSize where n is an integer and lowerBound <= rand <= upperBound) stepSize defaults to 1 (so integer outputs). If stepSize > upperBound-lowerBound than the output will always be lowerBound |\\n|$numrolls |The number of times to roll a random number and sum the results, defaults to 1 if no value is given. |\\n|$tiddler |The tiddler that will contain the random value, defaults to `<<currentTiddler>>` |\\n|$field |The field of the specified tiddler that will hold the random value, defaults to `store_field`. |\\n|$prefix |An optional prefix to the appended to the front of the output number. No default. |\\n|$length |The minimum length of the output, if the output would be shorter than this than zero padding is used. This will not shorten the output. |\\n\\nThe code will put a random number in the field `fieldName` of the tiddler `tiddlerName`. The number will be the sum of numberOfRolls numbers between `lowerBound` and `upperBound` inclusive.\\n\\n!Example:\\n\\n```\\n<$button>Roll Dice!\\n<$action-randval $field=fieldName/>\\n</$button>\\n```\\n\\nWhen the button is pressed, the code will generate a random integer between 1 and 6 inclusive and store it in the field fieldName. So it is equivalent to rolling a normal 6 sided dice.\\n\\n!How randVal is generated (pseudocode):\\n\\nnum_steps = (upperBound-lowerBound)/stepSize+1\\n\\noutput = 0\\n\\nfor i=1 to num_rolls\\n\\n  n = floor(num_steps*random())\\n  \\n  output = output + lowerBound+n*stepSize\\n  \\nend\\n\\nreturn output\\n  \"\n        }\n    }\n}","name":"randVal"}