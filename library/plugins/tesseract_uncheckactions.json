{"type":"application/json","text":"{\n    \"tiddlers\": {\n        \"$:/plugins/tesseract/uncheckactions/checkbox.js\": {\n            \"created\": \"20180227005230074\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/widgets/checkbox.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nCheckbox widget\\n\\n\\\\*/\\n(function() {\\n\\t/*jslint node: true, browser: true */\\n\\t/*global $tw: false */\\n\\t\\\"use strict\\\";\\n\\n\\tvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\n\\tvar CheckboxWidget = function(parseTreeNode, options) {\\n\\t\\tthis.initialise(parseTreeNode, options);\\n\\t};\\n\\n\\t/*\\nInherit from the base widget class\\n*/\\n\\tCheckboxWidget.prototype = new Widget();\\n\\n\\t/*\\nRender this widget into the DOM\\n*/\\n\\tCheckboxWidget.prototype.render = function(parent, nextSibling) {\\n\\t\\t// Save the parent dom node\\n\\t\\tthis.parentDomNode = parent;\\n\\t\\t// Compute our attributes\\n\\t\\tthis.computeAttributes();\\n\\t\\t// Execute our logic\\n\\t\\tthis.execute();\\n\\t\\t// Create our elements\\n\\t\\tthis.labelDomNode = this.document.createElement(\\\"label\\\");\\n\\t\\tthis.labelDomNode.setAttribute(\\\"class\\\", this.checkboxClass);\\n\\t\\tthis.inputDomNode = this.document.createElement(\\\"input\\\");\\n\\t\\tthis.inputDomNode.setAttribute(\\\"type\\\", \\\"checkbox\\\");\\n\\t\\tif (this.getValue()) {\\n\\t\\t\\tthis.inputDomNode.setAttribute(\\\"checked\\\", \\\"true\\\");\\n\\t\\t}\\n\\t\\tthis.labelDomNode.appendChild(this.inputDomNode);\\n\\t\\tthis.spanDomNode = this.document.createElement(\\\"span\\\");\\n\\t\\tthis.labelDomNode.appendChild(this.spanDomNode);\\n\\t\\t// Add a click event handler\\n\\t\\t$tw.utils.addEventListeners(this.inputDomNode, [\\n\\t\\t\\t{\\n\\t\\t\\t\\tname: \\\"change\\\",\\n\\t\\t\\t\\thandlerObject: this,\\n\\t\\t\\t\\thandlerMethod: \\\"handleChangeEvent\\\"\\n\\t\\t\\t}\\n\\t\\t]);\\n\\t\\t// Insert the label into the DOM and render any children\\n\\t\\tparent.insertBefore(this.labelDomNode, nextSibling);\\n\\t\\tthis.renderChildren(this.spanDomNode, null);\\n\\t\\tthis.domNodes.push(this.labelDomNode);\\n\\t};\\n\\n\\tCheckboxWidget.prototype.getValue = function() {\\n\\t\\tvar tiddler = this.wiki.getTiddler(this.checkboxTitle);\\n\\t\\tif (tiddler) {\\n\\t\\t\\tif (this.checkboxTag) {\\n\\t\\t\\t\\tif (this.checkboxInvertTag) {\\n\\t\\t\\t\\t\\treturn !tiddler.hasTag(this.checkboxTag);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn tiddler.hasTag(this.checkboxTag);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (this.checkboxField) {\\n\\t\\t\\t\\tvar value;\\n\\t\\t\\t\\tif ($tw.utils.hop(tiddler.fields, this.checkboxField)) {\\n\\t\\t\\t\\t\\tvalue = tiddler.fields[this.checkboxField] || \\\"\\\";\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tvalue = this.checkboxDefault || \\\"\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (value === this.checkboxChecked) {\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (value === this.checkboxUnchecked) {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (this.checkboxIndex) {\\n\\t\\t\\t\\tvar value = this.wiki.extractTiddlerDataItem(\\n\\t\\t\\t\\t\\ttiddler,\\n\\t\\t\\t\\t\\tthis.checkboxIndex,\\n\\t\\t\\t\\t\\tthis.checkboxDefault || \\\"\\\"\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tif (value === this.checkboxChecked) {\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (value === this.checkboxUnchecked) {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tif (this.checkboxTag) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t\\tif (this.checkboxField) {\\n\\t\\t\\t\\tif (this.checkboxDefault === this.checkboxChecked) {\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (this.checkboxDefault === this.checkboxUnchecked) {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false;\\n\\t};\\n\\n\\tCheckboxWidget.prototype.handleChangeEvent = function(event) {\\n\\t\\tvar checked = this.inputDomNode.checked,\\n\\t\\t\\ttiddler = this.wiki.getTiddler(this.checkboxTitle),\\n\\t\\t\\tfallbackFields = { text: \\\"\\\" },\\n\\t\\t\\tnewFields = { title: this.checkboxTitle },\\n\\t\\t\\thasChanged = false,\\n\\t\\t\\ttagCheck = false,\\n\\t\\t\\thasTag = tiddler && tiddler.hasTag(this.checkboxTag),\\n\\t\\t\\tvalue = checked ? this.checkboxChecked : this.checkboxUnchecked;\\n\\t\\tif (this.checkboxTag && this.checkboxInvertTag === \\\"yes\\\") {\\n\\t\\t\\ttagCheck = hasTag === checked;\\n\\t\\t} else {\\n\\t\\t\\ttagCheck = hasTag !== checked;\\n\\t\\t}\\n\\t\\t// Set the tag if specified\\n\\t\\tif (this.checkboxTag && (!tiddler || tagCheck)) {\\n\\t\\t\\tnewFields.tags = tiddler\\n\\t\\t\\t\\t? (tiddler.fields.tags || []).slice(0)\\n\\t\\t\\t\\t: [];\\n\\t\\t\\tvar pos = newFields.tags.indexOf(this.checkboxTag);\\n\\t\\t\\tif (pos !== -1) {\\n\\t\\t\\t\\tnewFields.tags.splice(pos, 1);\\n\\t\\t\\t}\\n\\t\\t\\tif (this.checkboxInvertTag === \\\"yes\\\" && !checked) {\\n\\t\\t\\t\\tnewFields.tags.push(this.checkboxTag);\\n\\t\\t\\t} else if (this.checkboxInvertTag !== \\\"yes\\\" && checked) {\\n\\t\\t\\t\\tnewFields.tags.push(this.checkboxTag);\\n\\t\\t\\t}\\n\\t\\t\\thasChanged = true;\\n\\t\\t}\\n\\t\\t// Set the field if specified\\n\\t\\tif (this.checkboxField) {\\n\\t\\t\\tif (!tiddler || tiddler.fields[this.checkboxField] !== value) {\\n\\t\\t\\t\\tnewFields[this.checkboxField] = value;\\n\\t\\t\\t\\thasChanged = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Set the index if specified\\n\\t\\tif (this.checkboxIndex) {\\n\\t\\t\\tvar indexValue = this.wiki.extractTiddlerDataItem(\\n\\t\\t\\t\\tthis.checkboxTitle,\\n\\t\\t\\t\\tthis.checkboxIndex\\n\\t\\t\\t);\\n\\t\\t\\tif (!tiddler || indexValue !== value) {\\n\\t\\t\\t\\thasChanged = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (hasChanged) {\\n\\t\\t\\tif (this.checkboxIndex) {\\n\\t\\t\\t\\tthis.wiki.setText(\\n\\t\\t\\t\\t\\tthis.checkboxTitle,\\n\\t\\t\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\t\\tthis.checkboxIndex,\\n\\t\\t\\t\\t\\tvalue\\n\\t\\t\\t\\t);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.wiki.addTiddler(\\n\\t\\t\\t\\t\\tnew $tw.Tiddler(\\n\\t\\t\\t\\t\\t\\tthis.wiki.getCreationFields(),\\n\\t\\t\\t\\t\\t\\tfallbackFields,\\n\\t\\t\\t\\t\\t\\ttiddler,\\n\\t\\t\\t\\t\\t\\tnewFields,\\n\\t\\t\\t\\t\\t\\tthis.wiki.getModificationFields()\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Trigger actions\\n\\t\\tif (this.checkboxActions) {\\n\\t\\t\\tthis.invokeActionString(this.checkboxActions, this, event);\\n\\t\\t}\\n\\t\\tif (this.checkboxUncheckActions && !checked) {\\n\\t\\t\\tthis.invokeActionString(this.checkboxUncheckActions, this, event);\\n\\t\\t}\\n\\t};\\n\\n\\t/*\\nCompute the internal state of the widget\\n*/\\n\\tCheckboxWidget.prototype.execute = function() {\\n\\t\\t// Get the parameters from the attributes\\n\\t\\tthis.checkboxActions = this.getAttribute(\\\"actions\\\");\\n\\t\\tthis.checkboxUncheckActions = this.getAttribute(\\\"uncheckactions\\\");\\n\\t\\tthis.checkboxTitle = this.getAttribute(\\n\\t\\t\\t\\\"tiddler\\\",\\n\\t\\t\\tthis.getVariable(\\\"currentTiddler\\\")\\n\\t\\t);\\n\\t\\tthis.checkboxTag = this.getAttribute(\\\"tag\\\");\\n\\t\\tthis.checkboxField = this.getAttribute(\\\"field\\\");\\n\\t\\tthis.checkboxIndex = this.getAttribute(\\\"index\\\");\\n\\t\\tthis.checkboxChecked = this.getAttribute(\\\"checked\\\");\\n\\t\\tthis.checkboxUnchecked = this.getAttribute(\\\"unchecked\\\");\\n\\t\\tthis.checkboxDefault = this.getAttribute(\\\"default\\\");\\n\\t\\tthis.checkboxClass = this.getAttribute(\\\"class\\\", \\\"\\\");\\n\\t\\tthis.checkboxInvertTag = this.getAttribute(\\\"invertTag\\\", \\\"\\\");\\n\\t\\t// Make the child widgets\\n\\t\\tthis.makeChildWidgets();\\n\\t};\\n\\n\\t/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\n\\tCheckboxWidget.prototype.refresh = function(changedTiddlers) {\\n\\t\\tvar changedAttributes = this.computeAttributes();\\n\\t\\tif (\\n\\t\\t\\tchangedAttributes.tiddler ||\\n\\t\\t\\tchangedAttributes.tag ||\\n\\t\\t\\tchangedAttributes.invertTag ||\\n\\t\\t\\tchangedAttributes.field ||\\n\\t\\t\\tchangedAttributes.index ||\\n\\t\\t\\tchangedAttributes.checked ||\\n\\t\\t\\tchangedAttributes.unchecked ||\\n\\t\\t\\tchangedAttributes[\\\"default\\\"] ||\\n\\t\\t\\tchangedAttributes[\\\"class\\\"]\\n\\t\\t) {\\n\\t\\t\\tthis.refreshSelf();\\n\\t\\t\\treturn true;\\n\\t\\t} else {\\n\\t\\t\\tvar refreshed = false;\\n\\t\\t\\tif (changedTiddlers[this.checkboxTitle]) {\\n\\t\\t\\t\\tthis.inputDomNode.checked = this.getValue();\\n\\t\\t\\t\\trefreshed = true;\\n\\t\\t\\t}\\n\\t\\t\\treturn this.refreshChildren(changedTiddlers) || refreshed;\\n\\t\\t}\\n\\t};\\n\\n\\texports.checkbox = CheckboxWidget;\\n})();\",\n            \"bag\": \"default\",\n            \"revision\": \"5\",\n            \"type\": \"application/javascript\",\n            \"title\": \"$:/plugins/tesseract/uncheckactions/checkbox.js\",\n            \"module-type\": \"widget\",\n            \"modified\": \"20180227011626281\"\n        },\n        \"$:/plugins/tesseract/uncheckactions/Readme\": {\n            \"created\": \"20180227011642557\",\n            \"text\": \"\\\\define title(name)\\n<h3> __''$name$''__ <h3>\\n\\\\end\\n\\n\\\\define helloact()\\n<$action-setfield $tiddler=\\\"$:/SiteTitle\\\" text=\\\"hello there\\\"/>\\n\\\\end\\n\\n\\\\define byebyeact()\\n<$action-setfield $tiddler=\\\"$:/SiteTitle\\\" text=\\\"bye\\\"/>\\n\\\\end\\n\\n<<title Introduction>>\\n\\nIn the checkbox widget, parameter '//actions//' can trigger a set of actions when it is checked. This plugin adds a parameter '//''uncheckactions''//' which can trigger a set of actions when the checkbox is unchecked.\\n\\n\\n<<title Example>>\\n\\n```\\n\\\\define helloact()\\n<$action-setfield $tiddler=\\\"$:/SiteTitle\\\" text=\\\"hello there\\\"/>\\n\\\\end\\n\\n\\\\define byebyeact()\\n<$action-setfield $tiddler=\\\"$:/SiteTitle\\\" text=\\\"bye\\\"/>\\n\\\\end\\n\\n<$checkbox  actions=<<helloact>> uncheckactions=<<byebyeact>>> Change Site-title by checking and unchecking</$checkbox>\\n```\\n\\nwill render as\\n\\n\\n<$checkbox  actions=<<helloact>> uncheckactions=<<byebyeact>>> Change Site-title by ''checking'' and ''unchecking''</$checkbox>\\n\\n\\n<<title Warning>> \\nThis property is similar to existing ''//actions//'' parameter in behaviour.  Only changes to the checkbox are propagated, not changes to the target. ie, If you set ''//uncheckactions//'' to change the site-title to \\\"Hello There\\\", unchecking the widget will change it so - however if the site-title is changed by some other way to \\\"Bye Bye\\\", it will not automatically make the checkbox \\\"checked\\\". \\n\\n\",\n            \"title\": \"$:/plugins/tesseract/uncheckactions/Readme\",\n            \"tags\": \"\",\n            \"modified\": \"20180227013345434\"\n        }\n    }\n}","author":"Riz","bag":"default","created":"20180227011546115","description":"UncheckActions: Adding Uncheck actions to checkbox widget","list":"Readme","modified":"20180227013635471","name":"UncheckActions","plugin-type":"plugin","revision":"2","title":"$:/plugins/tesseract/uncheckactions","version":"0.6.3"}