{"title":"$:/plugins/inmysocks/TriggerActions","description":"A daemon that will trigger actions widgets when a tiddler changes","author":"inmysocks","version":"0.0.8","core-version":">=5.1.8","source":"https://github.com/inmysocks/TW5-TriggerActions","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\n    \"tiddlers\": {\n        \"$:/plugins/inmysocks/TriggerActions/ExpressionViewTemplate\": {\n            \"created\": \"20150220031718036\",\n            \"list-after\": \"$:/core/ui/ViewTemplate/tags\",\n            \"modified\": \"20150220033423737\",\n            \"tags\": \"$:/tags/ViewTemplate\",\n            \"title\": \"$:/plugins/inmysocks/TriggerActions/ExpressionViewTemplate\",\n            \"text\": \"\\\\define thisViewTemplateFilter()\\n$(ViewTemplateFilter)$+[is[current]]\\n\\\\end\\n\\n<$set name=ViewTemplateFilter value={{$:/plugins/inmysocks/TriggerActions/TriggerActionsSettingsTiddler!!expression_tiddler_filter}}>\\n<$list filter=<<thisViewTemplateFilter>>>\\nAny tiddlers that would trigger an action are ignored if they appear in the list returned by the action filter of ''ANY'' expression tiddler to prevent infinite loops.\\n<br>\\n<$checkbox tiddler=<<currentTiddler>> field=evaluate checked='true' unchecked='false'/> Set as active\\n<br>\\nListen filter (updates are triggered when one of the things returned by this filter changes):\\n\\n<$edit-text field='listen_filter' placeholder='Listen Filter' class='tc-edit-texteditor'/>\\n<br>\\nAction filter (the actions are applied to the things returned by this filter whenever an update is triggered):\\n<$edit-text field='action_filter' placeholder='Action Filter' class='tc-edit-texteditor'/>\\n<br>\\n''Add action:''<br>\\nName (must be a valid field name): \\n<$edit-text tiddler='$:/temp/TriggerActions/NewAction' field='name' class='tc-edit-texteditor' placeholder='Action Name'/><br>\\nAction: \\n<$edit-text tiddler='$:/temp/TriggerActions/NewAction' field='action' class='tc-edit-texteditor' placeholder='Action Statement'/>\\n\\n<$button>Add\\n<$action-setfield $tiddler=<<currentTiddler>> $field={{$:/temp/TriggerActions/NewAction!!name}} $value={{$:/temp/TriggerActions/NewAction!!action}}/>\\n<$action-setfield $tiddler='$:/temp/TriggerActions/NewAction' name='' action=''/>\\n</$button>\\n<br>\\n''current actions:''\\n\\n<table>\\n<$list filter='[all[current]fields[]]-[[text]]-[[title]]-[[created]]-[[modified]]-[[creator]]-[[tags]]-[[evaluate]]-[[listen_filter]]-[[action_filter]]-[[listen_target]]' variable='currentField'>\\n<tr><td><$view tiddler=<<currentField>> field='title'/></td><td><$edit-text field=<<currentField>>/></td></tr>\\n</$list>\\n</table>\\n</$list>\\n</$set>\"\n        },\n        \"$:/plugins/inmysocks/TriggerActions/Settings\": {\n            \"caption\": \"Trigger Action Settings\",\n            \"created\": \"20150220042525921\",\n            \"modified\": \"20150220042713333\",\n            \"tags\": \"$:/tags/ControlPanel\",\n            \"title\": \"$:/plugins/inmysocks/TriggerActions/Settings\",\n            \"text\": \"Tiddlers returned by the filter will be considered expression tiddlers:\\n\\n<$edit-text tiddler='$:/plugins/inmysocks/TriggerActions/TriggerActionsSettingsTiddler' field='expression_tiddler_filter' class='tc-edit-texteditor'/>\\n\\nHere is a list of all tiddlers currently marked as listened to so they can't be changed by the triggered actions. If it is no longer listed under any of the listen filters you can uncheck it here. trying to uncheck one that is currently listened to won't do anything.\\n\\n<$list filter='[listen_target[true]]'>\\n\\n<$checkbox tiddler=<<currentTiddler>> field='listen_target' checked='true' unchecked='false'/> <$link to=<<currentTiddler>>><$view field='title'/></$link>\\n\\n</$list>\"\n        },\n        \"$:/plugins/inmysocks/TriggerActions/TriggerActionsSettingsTiddler\": {\n            \"expression_tiddler_filter\": \"[tag[$:/tags/Trigger]]\",\n            \"title\": \"$:/plugins/inmysocks/TriggerActions/TriggerActionsSettingsTiddler\",\n            \"type\": \"text/vnd.tiddlywiki\"\n        },\n        \"$:/plugins/inmysocks/TriggerActions/trigger-actions-daemon.js\": {\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/inmysocks/TriggerActions/trigger-actions-daemon.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nTrigger Actions Daemon\\n\\n\\\\*/\\n(function () {\\n\\n\\t/*jslint node: true, browser: true */\\n\\t/*global $tw: false */\\n\\t\\\"use strict\\\";\\n\\n\\t// Export name and synchronous status\\n\\texports.name = \\\"trigger-actions-daemon\\\";\\n\\texports.platforms = [\\\"browser\\\"];\\n\\texports.after = [\\\"startup\\\"];\\n\\texports.synchronous = true;\\n\\n\\tvar Wiki = require(\\\"$:/core/modules/wiki.js\\\");\\n\\n\\t// Configuration tiddler\\n\\tvar CONFIGURATION_TIDDLER = \\\"$:/plugins/inmysocks/TriggerActions/TriggerActionsSettingsTiddler\\\";\\n\\tvar configurationTiddler = $tw.wiki.getTiddler(CONFIGURATION_TIDDLER);\\n\\n\\texports.startup = function() {\\n\\t\\t// Do all actions on startup.\\n\\t\\ttriggerActionsFull();\\n\\n\\t\\t// Reset the values when any of the tiddlers change.\\n\\t\\t$tw.wiki.addEventListener(\\\"change\\\",function(changes) {\\n\\t\\t\\t//If the configuration changes do a full refresh, otherwise just refresh the changed expression.\\n\\t\\t\\tif($tw.utils.hop(changes, CONFIGURATION_TIDDLER)) {\\n\\t\\t\\t\\ttriggerActionsFull();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t//Get the action tag from the configuration tiddler and filter to get a list of expression tiddlers.\\n\\t\\t\\t\\tvar expressionTiddlerFilter = configurationTiddler.getFieldString(\\\"expression_tiddler_filter\\\");\\n\\t\\t\\t\\tvar tiddlersFilter = expressionTiddlerFilter + \\\"+[evaluate[true]!has[draft.of]]\\\";\\n\\t\\t\\t\\tvar expressionTiddlerList = $tw.wiki.filterTiddlers(tiddlersFilter);\\n\\t\\t\\t\\tvar fields;\\n\\t\\t\\t\\t//Iterate through the list of expression tidders and evaluate any that have changed.\\n\\t\\t\\t\\tif(expressionTiddlerList.length !== 0) {\\n\\t\\t\\t\\t\\tfor (var j = 0; j < expressionTiddlerList.length; j++) {\\n\\t\\t\\t\\t\\t\\tvar expressionTiddler = $tw.wiki.getTiddler(expressionTiddlerList[j]);\\n\\t\\t\\t\\t\\t\\tif(expressionTiddler) {\\n\\t\\t\\t\\t\\t\\t\\t// Label the current expression tiddler as a listen target if it isn't already labeled.\\n\\t\\t\\t\\t\\t\\t\\tif(expressionTiddler.getFieldString(\\\"listen_target\\\") !== \\\"true\\\") {\\n\\t\\t\\t\\t\\t\\t\\t\\tfields = {};\\n\\t\\t\\t\\t\\t\\t\\t\\tfields[\\\"listen_target\\\"] = \\\"true\\\";\\n\\t\\t\\t\\t\\t\\t\\t\\t$tw.wiki.addTiddler(new $tw.Tiddler(expressionTiddler,fields,undefined));\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t// If the expression tiddler has changed, update its output.\\n\\t\\t\\t\\t\\t\\t\\tif($tw.utils.hop(changes,expressionTiddlerList[j])) {\\n\\t\\t\\t\\t\\t\\t\\t\\tevaluateExpression(expressionTiddler);\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\t// If any of the tiddlers listed in the listenFilter change update the output.\\n\\t\\t\\t\\t\\t\\t\\t\\tvar listenFilter = expressionTiddler.getFieldString(\\\"listen_filter\\\");\\n\\t\\t\\t\\t\\t\\t\\t\\tvar listenTiddlerList = $tw.wiki.filterTiddlers(listenFilter);\\n\\t\\t\\t\\t\\t\\t\\t\\tif(listenTiddlerList.length !== 0) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tfor (var p = 0; p < listenTiddlerList.length; p++) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tvar currentListenTiddler = $tw.wiki.getTiddler(listenTiddlerList[p]);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Make sure all the listen targets are labeled correctly to prevent infinite loops.\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif(currentListenTiddler && currentListenTiddler.getFieldString(\\\"listen_target\\\") !== \\\"true\\\") {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfields = {};\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfields[\\\"listen_target\\\"] = \\\"true\\\";\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t$tw.wiki.addTiddler(new $tw.Tiddler(currentListenTiddler,fields,undefined));\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif($tw.utils.hop(changes,listenTiddlerList[p])) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tevaluateExpression(expressionTiddler);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t};\\n\\n\\t// This returns the content of all fields execpt: title, text, modified, created, creator, tags, evaluate, listen_filter, action_filter\\n\\tfunction getTiddlerFields(tiddler) {\\n\\t\\tvar results = [];\\t\\t\\n\\t\\tif(tiddler) {\\n\\t\\t\\tfor(var fieldName in tiddler.fields) {\\n\\t\\t\\t\\tif(fieldName != \\\"title\\\" && fieldName != \\\"text\\\" && fieldName != \\\"modified\\\" && fieldName != \\\"created\\\" && fieldName != \\\"creator\\\" && fieldName !=\\\"tags\\\" && fieldName != \\\"evaluate\\\" && fieldName != \\\"listen_filter\\\" && fieldName != \\\"action_filter\\\") {\\n\\t\\t\\t\\t\\t$tw.utils.pushTop(results,fieldName);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\n\\t// This returns the content of all fields in the fieldList.\\n\\tfunction getActionList(expressionTiddler, fieldList) {\\n\\t\\tvar results = [];\\t\\t\\n\\t\\tif(fieldList) {\\n\\t\\t\\tfor(var m =0; m < fieldList.length; m++) {\\n\\t\\t\\t\\tif(fieldList[m]) {\\n\\t\\t\\t\\t\\t$tw.utils.pushTop(results,expressionTiddler.getFieldString(fieldList[m]));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\n\\t// This should be simple, it just takes each expression tiddler, evaluates its filter and then performs the actions on each tiddler returned by the filter.\\n\\tfunction evaluateExpression(expressionTiddler) {\\n\\t\\t// Get information from the expressionTiddler.\\n\\t\\tvar expressionFilter = expressionTiddler.getFieldString(\\\"action_filter\\\");\\n\\t\\tvar fieldList = getTiddlerFields(expressionTiddler);\\n\\t\\tvar actionList = getActionList(expressionTiddler, fieldList);\\n\\n\\t\\tvar parsed;\\n\\t\\tvar widgets;\\n\\t\\tvar container;\\n\\t\\tvar stringPassed;\\n\\n\\t\\t// Iterate through the values returned by the expressionFilter and for each value execute each action in the actionList.\\n\\t\\tvar actionTiddlers = $tw.wiki.filterTiddlers(expressionFilter);\\n\\t\\tfor(var i=0; i<actionTiddlers.length; i++) {\\n\\t\\t\\tvar currentActionTiddler = $tw.wiki.getTiddler(actionTiddlers[i]);\\n\\t\\t\\t// If the current value is a tiddler.\\n\\t\\t\\tif(currentActionTiddler) {\\n\\t\\t\\t\\t// Only act if changing the current action tiddler will not trigger another set of actions.\\n\\t\\t\\t\\tif(currentActionTiddler.getFieldString(\\\"listen_target\\\") !== \\\"true\\\") {\\n\\t\\t\\t\\t\\tfor(var l=0; l<actionList.length; l++) {\\n\\t\\t\\t\\t\\t\\tif(!changesListenTarget(actionList[l])) {\\n\\t\\t\\t\\t\\t\\t\\t// Variables have to be imported in order for macros to work.\\n\\t\\t\\t\\t\\t\\t\\tstringPassed = \\\"<$importvariables filter='[[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]'>\\\"+actionList[l]+\\\"</$importvariables>\\\";\\n\\t\\t\\t\\t\\t\\t\\tparsed = $tw.wiki.parseText(\\\"text/vnd.tiddlywiki\\\", stringPassed, {});\\n\\t\\t\\t\\t\\t\\t\\twidgets = $tw.wiki.makeWidget(parsed, {parentWidget:$tw.rootWidget});\\n\\t\\t\\t\\t\\t\\t\\tcontainer = $tw.fakeDocument.createElement(\\\"div\\\");\\n\\t\\t\\t\\t\\t\\t\\twidgets.setVariable(\\\"currentTiddler\\\", actionTiddlers[i]);\\n\\t\\t\\t\\t\\t\\t\\twidgets.render(container, null);\\n\\t\\t\\t\\t\\t\\t\\tvar widgetChild1 = widgets.children[0]; //This is to prevent infinite loops. I don't like how I did this.\\n\\t\\t\\t\\t\\t\\t\\twidgetChild1.children[0].invokeActions({});\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}  else { \\n\\t\\t\\t//If the current value isn't a tiddler it is handled differently.\\n\\t\\t\\t\\tfor(var p=0; p<actionList.length; p++) {\\n\\t\\t\\t\\t\\tif(!changesListenTarget(actionList[p])) {\\n\\t\\t\\t\\t\\t\\t// Variables have to be imported in order for macros to work.\\n\\t\\t\\t\\t\\t\\tstringPassed = \\\"<$importvariables filter='[[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]'>\\\"+actionList[p]+\\\"</$importvariables>\\\";\\n\\t\\t\\t\\t\\t\\tparsed = $tw.wiki.parseText(\\\"text/vnd.tiddlywiki\\\", stringPassed, {});\\n\\t\\t\\t\\t\\t\\twidgets = $tw.wiki.makeWidget(parsed, {parentWidget:$tw.rootWidget});\\n\\t\\t\\t\\t\\t\\tcontainer = $tw.fakeDocument.createElement(\\\"div\\\");\\n\\t\\t\\t\\t\\t\\twidgets.setVariable(\\\"currentTiddler\\\", actionTiddlers[i]);\\n\\t\\t\\t\\t\\t\\twidgets.render(container, null);\\n\\t\\t\\t\\t\\t\\tvar widgetChild1 = widgets.children[0]; //This is to prevent infinite loops. I don't like how I did this.\\n\\t\\t\\t\\t\\t\\twidgetChild1.children[0].invokeActions({});\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// This checks to see if the actionTiddler variable in the current action widget is set to one of the listen targets and if so returns true, otherwise returns false.\\n\\tfunction changesListenTarget(actionItem) {\\n\\t\\t// This is terrible, but it is the only way I can come up with that lets you both avoid infinite loops and use macros. I am sorry for this code.\\n\\t\\tvar parsed = $tw.wiki.parseText(\\\"text/vnd.tiddlywiki\\\", actionItem, {});\\n\\t\\tvar widgets = $tw.wiki.makeWidget(parsed, {});\\n\\t\\tvar container = $tw.fakeDocument.createElement(\\\"div\\\");\\n\\t\\twidgets.setVariable(\\\"currentTiddler\\\", actionItem);\\n\\t\\twidgets.render(container, null);\\n\\t\\tvar widgetChild1 = widgets.children[0];\\n\\t\\tif(widgetChild1 && widgetChild1.children[0].actionTiddler) {\\n\\t\\t\\tvar listenTargets = $tw.wiki.filterTiddlers(\\\"[listen_target[true]]\\\");\\n\\t\\t\\tif(listenTargets.indexOf(widgetChild1.children[0].actionTiddler) === -1) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// On startup make sure expressions are up to date.\\n\\tfunction triggerActionsFull() {\\n\\t\\tvar CONFIGURATION_TIDDLER = \\\"$:/plugins/inmysocks/TriggerActions/TriggerActionsSettingsTiddler\\\";\\n\\t\\tvar configurationTiddler = $tw.wiki.getTiddler(CONFIGURATION_TIDDLER);\\n\\t\\tvar expressionTiddlerFilter = configurationTiddler.getFieldString(\\\"expression_tiddler_filter\\\");\\n\\t\\tvar tiddlersFilter = expressionTiddlerFilter + \\\"+[evaluate[true]!has[draft.of]]\\\";\\n\\t\\tvar expressionTiddlerList = $tw.wiki.filterTiddlers(tiddlersFilter);\\n\\t\\tif(expressionTiddlerList.length !== 0) {\\n\\t\\t\\tfor (var j = 0; j < expressionTiddlerList.length; j++) {\\n\\t\\t\\t\\tvar expressionTiddler = $tw.wiki.getTiddler(expressionTiddlerList[j]);\\n\\t\\t\\t\\tif(expressionTiddler) {\\n\\t\\t\\t\\t\\tevaluateExpression(expressionTiddler);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n})();\",\n            \"title\": \"$:/plugins/inmysocks/TriggerActions/trigger-actions-daemon.js\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"startup\"\n        }\n    }\n}","name":"TriggerActions"}