{"type":"application/json","text":"{\n    \"tiddlers\": {\n        \"$:/plugins/tesseract/reveal-Ext/reveal.js\": {\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/tesseract/reveal-Ext/reveal.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nReveal widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar RevealWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nRevealWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nRevealWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tvar tag = this.parseTreeNode.isBlock ? \\\"div\\\" : \\\"span\\\";\\n\\tif(this.revealTag && $tw.config.htmlUnsafeElements.indexOf(this.revealTag) === -1) {\\n\\t\\ttag = this.revealTag;\\n\\t}\\n\\tvar domNode = this.document.createElement(tag);\\n\\tvar classes = this[\\\"class\\\"].split(\\\" \\\") || [];\\n\\tclasses.push(\\\"tc-reveal\\\");\\n\\tdomNode.className = classes.join(\\\" \\\");\\n\\tif(this.style) {\\n\\t\\tdomNode.setAttribute(\\\"style\\\",this.style);\\n\\t}\\n\\tparent.insertBefore(domNode,nextSibling);\\n\\tthis.renderChildren(domNode,null);\\n\\tif(!domNode.isTiddlyWikiFakeDom && this.type === \\\"popup\\\" && this.isOpen) {\\n\\t\\tthis.positionPopup(domNode);\\n\\t\\t$tw.utils.addClass(domNode,\\\"tc-popup\\\"); // Make sure that clicks don't dismiss popups within the revealed content\\n\\t}\\n\\tif(!this.isOpen) {\\n\\t\\tdomNode.setAttribute(\\\"hidden\\\",\\\"true\\\");\\n\\t}\\n\\tthis.domNodes.push(domNode);\\n};\\n\\nRevealWidget.prototype.positionPopup = function(domNode) {\\n\\tdomNode.style.position = \\\"absolute\\\";\\n\\tdomNode.style.zIndex = \\\"1000\\\";\\n\\tswitch(this.position) {\\n\\t\\tcase \\\"left\\\":\\n\\t\\t\\tdomNode.style.left = (this.popup.left - domNode.offsetWidth) + \\\"px\\\";\\n\\t\\t\\tdomNode.style.top = this.popup.top + \\\"px\\\";\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"above\\\":\\n\\t\\t\\tdomNode.style.left = this.popup.left + \\\"px\\\";\\n\\t\\t\\tdomNode.style.top = (this.popup.top - domNode.offsetHeight) + \\\"px\\\";\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"aboveright\\\":\\n\\t\\t\\tdomNode.style.left = (this.popup.left + this.popup.width) + \\\"px\\\";\\n\\t\\t\\tdomNode.style.top = (this.popup.top + this.popup.height - domNode.offsetHeight) + \\\"px\\\";\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"right\\\":\\n\\t\\t\\tdomNode.style.left = (this.popup.left + this.popup.width) + \\\"px\\\";\\n\\t\\t\\tdomNode.style.top = this.popup.top + \\\"px\\\";\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"belowleft\\\":\\n\\t\\t\\tdomNode.style.left = (this.popup.left + this.popup.width - domNode.offsetWidth) + \\\"px\\\";\\n\\t\\t\\tdomNode.style.top = (this.popup.top + this.popup.height) + \\\"px\\\";\\n\\t\\t\\tbreak;\\n\\t\\tdefault: // Below\\n\\t\\t\\tdomNode.style.left = this.popup.left + \\\"px\\\";\\n\\t\\t\\tdomNode.style.top = (this.popup.top + this.popup.height) + \\\"px\\\";\\n\\t\\t\\tbreak;\\n\\t}\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nRevealWidget.prototype.execute = function() {\\n\\t// Get our parameters\\n\\tthis.state = this.getAttribute(\\\"state\\\");\\n\\tthis.revealTag = this.getAttribute(\\\"tag\\\");\\n\\tthis.type = this.getAttribute(\\\"type\\\");\\n\\tthis.text = this.getAttribute(\\\"text\\\");\\n\\tthis.position = this.getAttribute(\\\"position\\\");\\n\\tthis[\\\"class\\\"] = this.getAttribute(\\\"class\\\",\\\"\\\");\\n\\tthis.style = this.getAttribute(\\\"style\\\",\\\"\\\");\\n\\tthis[\\\"default\\\"] = this.getAttribute(\\\"default\\\",\\\"\\\");\\n\\tthis.animate = this.getAttribute(\\\"animate\\\",\\\"no\\\");\\n\\tthis.retain = this.getAttribute(\\\"retain\\\",\\\"no\\\");\\n\\tthis.openAnimation = this.animate === \\\"no\\\" ? undefined : \\\"open\\\";\\n\\tthis.closeAnimation = this.animate === \\\"no\\\" ? undefined : \\\"close\\\";\\n\\t// Compute the title of the state tiddler and read it\\n\\tthis.stateTitle = this.state;\\n\\tthis.readState();\\n\\t// Construct the child widgets\\n\\tvar childNodes = this.isOpen ? this.parseTreeNode.children : [];\\n\\tthis.hasChildNodes = this.isOpen;\\n\\tthis.makeChildWidgets(childNodes);\\n};\\n\\n/*\\nRead the state tiddler\\n*/\\nRevealWidget.prototype.readState = function() {\\n\\t// Read the information from the state tiddler\\n\\tvar state = this.stateTitle ? this.wiki.getTextReference(this.stateTitle,this[\\\"default\\\"],this.getVariable(\\\"currentTiddler\\\")) : this[\\\"default\\\"];\\n\\tswitch(this.type) {\\n\\t\\tcase \\\"popup\\\":\\n\\t\\t\\tthis.readPopupState(state);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"match\\\":\\n\\t\\t\\tthis.readMatchState(state);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"nomatch\\\":\\n\\t\\t\\tthis.readMatchState(state);\\n\\t\\t\\tthis.isOpen = !this.isOpen;\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"lt\\\":\\n\\t\\t\\tthis.readMatchStatelt(state);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"gt\\\":\\n\\t\\t\\tthis.readMatchStategt(state);\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"lteq\\\":\\n\\t\\t\\tthis.readMatchStategt(state);\\n\\t\\t\\tthis.isOpen = !this.isOpen;\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"gteq\\\":\\n\\t\\t\\tthis.readMatchStatelt(state);\\n\\t\\t\\tthis.isOpen = !this.isOpen;\\n\\t\\t\\tbreak;\\n\\t}\\n};\\n\\nRevealWidget.prototype.compareStateText = function(state) {\\n\\tvar result = state.localeCompare(this.text, undefined, {numeric: true, sensitivity: 'case'});\\n\\treturn result;\\n};\\nRevealWidget.prototype.readMatchState = function(state) {\\n\\tthis.isOpen = (this.compareStateText(state) == 0)?true:false;\\n};\\nRevealWidget.prototype.readMatchStatelt = function(state) {\\n\\tthis.isOpen = (this.compareStateText(state) < 0)?true:false;\\n};\\nRevealWidget.prototype.readMatchStategt = function(state) {\\n\\tthis.isOpen = (this.compareStateText(state) > 0)?true:false;\\n};\\n\\nRevealWidget.prototype.readPopupState = function(state) {\\n\\tvar popupLocationRegExp = /^\\\\((-?[0-9\\\\.E]+),(-?[0-9\\\\.E]+),(-?[0-9\\\\.E]+),(-?[0-9\\\\.E]+)\\\\)$/,\\n\\t\\tmatch = popupLocationRegExp.exec(state);\\n\\t// Check if the state matches the location regexp\\n\\tif(match) {\\n\\t\\t// If so, we're open\\n\\t\\tthis.isOpen = true;\\n\\t\\t// Get the location\\n\\t\\tthis.popup = {\\n\\t\\t\\tleft: parseFloat(match[1]),\\n\\t\\t\\ttop: parseFloat(match[2]),\\n\\t\\t\\twidth: parseFloat(match[3]),\\n\\t\\t\\theight: parseFloat(match[4])\\n\\t\\t};\\n\\t} else {\\n\\t\\t// If not, we're closed\\n\\t\\tthis.isOpen = false;\\n\\t}\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nRevealWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.state || changedAttributes.type || changedAttributes.text || changedAttributes.position || changedAttributes[\\\"default\\\"] || changedAttributes.animate) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tvar refreshed = false,\\n\\t\\t\\tcurrentlyOpen = this.isOpen;\\n\\t\\tthis.readState();\\n\\t\\tif(this.isOpen !== currentlyOpen) {\\n\\t\\t\\tif(this.retain === \\\"yes\\\") {\\n\\t\\t\\t\\tthis.updateState();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.refreshSelf();\\n\\t\\t\\t\\trefreshed = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn this.refreshChildren(changedTiddlers) || refreshed;\\n\\t}\\n};\\n\\n/*\\nCalled by refresh() to dynamically show or hide the content\\n*/\\nRevealWidget.prototype.updateState = function() {\\n\\t// Read the current state\\n\\tthis.readState();\\n\\t// Construct the child nodes if needed\\n\\tvar domNode = this.domNodes[0];\\n\\tif(this.isOpen && !this.hasChildNodes) {\\n\\t\\tthis.hasChildNodes = true;\\n\\t\\tthis.makeChildWidgets(this.parseTreeNode.children);\\n\\t\\tthis.renderChildren(domNode,null);\\n\\t}\\n\\t// Animate our DOM node\\n\\tif(!domNode.isTiddlyWikiFakeDom && this.type === \\\"popup\\\" && this.isOpen) {\\n\\t\\tthis.positionPopup(domNode);\\n\\t\\t$tw.utils.addClass(domNode,\\\"tc-popup\\\"); // Make sure that clicks don't dismiss popups within the revealed content\\n\\n\\t}\\n\\tif(this.isOpen) {\\n\\t\\tdomNode.removeAttribute(\\\"hidden\\\");\\n        $tw.anim.perform(this.openAnimation,domNode);\\n\\t} else {\\n\\t\\t$tw.anim.perform(this.closeAnimation,domNode,{callback: function() {\\n\\t\\t\\tdomNode.setAttribute(\\\"hidden\\\",\\\"true\\\");\\n        }});\\n\\t}\\n};\\n\\nexports.reveal = RevealWidget;\\n\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"title\": \"$:/plugins/tesseract/reveal-Ext/reveal.js\",\n            \"revision\": \"1\",\n            \"module-type\": \"widget\",\n            \"modified\": \"20180309092410601\",\n            \"created\": \"20180226095134521\",\n            \"bag\": \"default\"\n        },\n        \"$:/plugins/tesseract/reveal-Ext/Readme\": {\n            \"created\": \"20180226101150594\",\n            \"text\": \"!!! __''Introduction''__\\n\\n\\n* type=''lt'': the content is displayed if the state tiddler has a value ''less than'' a specified value\\n* type=''gt'': the content is displayed if the state tiddler has a value ''greater than'' a specified value\\n* type=''lteq'': the content is displayed if the state tiddler has a value ''less than or equal to'' a specified value\\n* type=''gteq'': the content is displayed if the state tiddler has a value ''greater than or equal to'' a specified value\\n\\n\\n!!! __''Usage''__\\n\\n\\n```\\n<$button set=\\\"$:/state/SampleReveal1\\\" setTo=\\\"100\\\">Show me</$button>\\n<$button set=\\\"$:/state/SampleReveal1\\\" setTo=\\\"99\\\">Hide me</$button>\\n\\n<$reveal type=\\\"gteq\\\" state=\\\"$:/state/SampleReveal1\\\" text=\\\"100\\\">\\n\\n! This is the revealed content\\nAnd this is some text\\n\\n</$reveal>\\n```\\nrenders as\\n\\n<$button set=\\\"$:/state/SampleReveal1\\\" setTo=\\\"100\\\">Show me</$button>\\n<$button set=\\\"$:/state/SampleReveal1\\\" setTo=\\\"99\\\">Hide me</$button>\\n\\n<$reveal type=\\\"gteq\\\" state=\\\"$:/state/SampleReveal1\\\" text=\\\"100\\\">\\n\\n! This is the revealed content\\nAnd this is some text\\n\\n</$reveal>\",\n            \"title\": \"$:/plugins/tesseract/reveal-Ext/Readme\",\n            \"tags\": \"\",\n            \"modified\": \"20180226101700423\"\n        }\n    }\n}","author":"Riz","bag":"default","created":"20180226101117638","description":"Reveal-Extended: Adding <,>,<=,>= types to reveal widget","list":"Readme","modified":"20180226101729903","plugin-type":"plugin","revision":"3","title":"$:/plugins/tesseract/reveal-Ext","version":"0.6.6","name":"reveal-Ext"}