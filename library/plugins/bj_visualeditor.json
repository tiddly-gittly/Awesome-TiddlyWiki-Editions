{"type":"application/json","text":"{\n    \"tiddlers\": {\n        \"$:/bj/modules/widgets/edit.js\": {\n            \"text\": \"/*\\\\\\ntitle: $:/bj/modules/widgets/edit.js\\ntype: application/javascript\\nmodule-type: widget\\n\\\\*/\\n\\nif($tw.browser )   {\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar ready = false;\\n\\nvar MIN_TEXT_AREA_HEIGHT = 100; // Minimum height of textareas in pixels\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar EditHtmlWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\nvar PLUSMODE = (typeof $tw.wiki.getTiddler(\\\"$:/language/Docs/Types/text/x-perimental\\\")!='undefined');\\n\\n/*\\nInherit from the base widget class\\n*/\\nEditHtmlWidget.prototype = new Widget();\\n\\nEditHtmlWidget.prototype.postRender = function() {\\n\\tvar self = this,\\n\\t\\tcm;\\n\\tvar toWiki = function(text) {\\n\\t\\t//if($tw.browser) alert(\\\"in towiki \\\"+text)\\n\\n\\t\\t//BJ FIXME - in theory the attribs can be in any order, so this may fail as it is\\n\\t\\tvar newtext = \\\"\\\";\\n\\n\\t\\t newtext = text.replace(/^<p><span class=\\\\\\\"verbatim\\\\\\\".*?>([^<]*)<\\\\/span><\\\\/p>/,\\n\\t\\tfunction(m,key,offset,str){\\n                if (key.indexOf('<') != -1) {// we have caputure some formatting - !abort\\n\\t\\t\\t\\t\\treturn m;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn $tw.utils.htmlDecode(key) + \\\"\\\\n<!-- verbatim -->\\\";\\n\\n\\t\\t});\\n\\t\\tnewtext =\\n\\t\\tnewtext.replace(/<p><span class=\\\\\\\"verbatim\\\\\\\".*?>([^<]*)<\\\\/span><\\\\/p>/g,\\n\\t\\tfunction(m,key,offset,str){\\n                if (key.indexOf('<') != -1) {// we have caputure some formatting - !abort\\n\\t\\t\\t\\t\\treturn m;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn \\\"\\\\n<!-- nl verb -->\\\"+$tw.utils.htmlDecode(key)+\\\"<!-- atim -->\\\";\\n\\n\\t\\t\\t\\n\\t\\t});\\n\\t\\tnewtext = newtext.replace(/<span class=\\\\\\\"verbatim\\\\\\\".*?>([^<]*)<\\\\/span>/g,\\n\\t\\t\\tfunction(m,key,offset,str){\\n\\t\\t\\t\\tif (key.indexOf('<')!=-1) {// we have caputure some formatting - !abort\\n\\t\\t\\t\\t\\treturn m;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn \\\"<!-- verb -->\\\"+$tw.utils.htmlDecode(key)+\\\"<!-- atim -->\\\";\\n\\t\\t\\t});\\n\\t\\treturn newtext;\\n\\t}\\n\\n\\tif($tw.browser && window.CKEDITOR && this.editTag === \\\"textarea\\\") {\\n\\t\\t\\n\\t\\tvar ck =\\\"editor\\\"+ Math.random();\\n\\t\\tthis.domNodes[0].firstChild.setAttribute(\\\"name\\\",ck);\\n\\t\\tthis.domNodes[0].firstChild.setAttribute(\\\"id\\\",ck);\\n\\t\\tvar config;\\n\\t\\ttry {\\n\\t\\t    config = $tw.wiki.getTiddlerData(\\\"$:/plugins/bj/visualeditor/config.json\\\");\\n\\t\\t} catch(e) {\\n\\t\\t\\talert(\\\"invalid config format\\\");\\n\\t\\t\\tconfig = [];\\n\\t\\t}\\n\\t\\tCKEDITOR.replace(ck, config);//,\\n\\n\\t\\tCKEDITOR.instances[ck].on('change', \\n\\t\\t\\tfunction() { \\n\\t\\t\\t\\tif (PLUSMODE && self.edittype == 'text/x-perimental') {\\n\\t\\t\\t\\t\\tself.saveChanges(toWiki(CKEDITOR.instances[ck].getData()));\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tself.saveChanges(CKEDITOR.instances[ck].getData());\\n\\t\\t\\t\\t} \\n\\t\\t\\t}\\n\\t\\t);\\n\\t} \\n};\\n\\nEditHtmlWidget.prototype.render = function(parent,nextSibling) {\\n\\tvar self = this;\\n\\t// Save the parent dom node\\n\\tthis.parentDomNode = parent;\\n\\t// Compute our attributes\\n\\tthis.computeAttributes();\\n\\t// Execute our logic\\n\\tthis.execute();\\n\\tvar fromWiki = function(text) {\\n\\t\\tvar preAmble = '<span class=\\\"verbatim\\\">';\\n\\t\\tvar index=1;\\n\\t\\t//seperate the /define .../end section\\n\\t\\ttext = text.split(\\\"<\\\\!-- verbatim -->\\\");\\n\\t\\tif (text.length == 1) //no preamble defined\\n\\t\\t\\tindex = 0;\\n\\t\\telse\\n\\t\\t\\ttext[0] = preAmble+$tw.utils.htmlEncode(text[0]) + '</span>'\\n\\t\\ttext[index] = text[index].replace(/^<\\\\!-- nl verb -->([\\\\s\\\\S]*?)<\\\\!-- atim -->/mg,\\n\\t\\tfunction(m,key,offset,str){//alert(key);\\n\\t\\t\\treturn '<p>' + preAmble+$tw.utils.htmlEncode(key)+'</span>'+'</p>';\\n\\t\\t});//alert (\\\"newtext \\\"+text[index]);\\n\\t\\ttext[index] = text[index].replace(/<\\\\!-- verb -->([\\\\s\\\\S]*?)<\\\\!-- atim -->/g,\\n\\t\\tfunction(m,key,offset,str){//alert(key);\\n\\t\\t\\treturn preAmble+$tw.utils.htmlEncode(key)+'</span>';\\n\\t\\t});\\n\\t\\t//alert (\\\"newtext \\\"+text.join(\\\"\\\"));\\n\\t\\treturn text.join(\\\"\\\");\\n\\t}\\n\\t// Create our element\\n\\tvar outerDomNode = this.document.createElement('div');\\n\\t\\touterDomNode.className = \\\"tw-ckeditor-instance\\\";\\n\\tvar domNode = this.document.createElement(this.editTag);\\n\\n\\tif(this.editPlaceholder) {\\n\\t\\tdomNode.setAttribute(\\\"placeholder\\\",this.editPlaceholder);\\n\\t}\\n\\t// Assign classes\\n\\tif(this.editClass) {\\n\\t\\tdomNode.className = this.editClass;\\n\\t}\\n\\t// Set the text\\n\\tvar editInfo = this.getEditInfo();\\n\\tif(this.editTag === \\\"textarea\\\") {\\n\\t\\tif (PLUSMODE && this.edittype == 'text/x-perimental') {\\n\\t\\t\\tdomNode.appendChild(this.document.createTextNode(fromWiki(editInfo.value)));\\n\\t\\t} else  {\\n\\t\\t\\tdomNode.appendChild(this.document.createTextNode(editInfo.value));\\n\\t\\t} \\n\\t} else {\\n\\t\\talert(\\\"visual editor only works with textarea\\\")\\n\\t}\\n    outerDomNode.appendChild(domNode);\\n\\t// Insert the element into the DOM\\n\\tparent.insertBefore(outerDomNode,nextSibling);\\n\\tthis.domNodes.push(outerDomNode);\\n\\tif(this.postRender) {\\n\\t\\tthis.postRender();\\n\\t}\\n};\\n\\n/*\\nGet the tiddler being edited and current value\\n*/\\nEditHtmlWidget.prototype.getEditInfo = function() {\\n\\t// Get the edit value\\n\\tvar self = this,\\n\\t\\tvalue,\\n\\t\\tupdate;\\n\\tif(this.editIndex) {\\n\\t\\tvalue = this.wiki.extractTiddlerDataItem(this.editTitle,this.editIndex,this.editDefault);\\n\\t\\tupdate = function(value) {\\n\\t\\t\\tvar data = self.wiki.getTiddlerData(self.editTitle,{});\\n\\t\\t\\tif(data[self.editIndex] !== value) {\\n\\t\\t\\t\\tdata[self.editIndex] = value;\\n\\t\\t\\t\\tself.wiki.setTiddlerData(self.editTitle,data);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t} else {\\n\\t\\t// Get the current tiddler and the field name\\n\\t\\tvar tiddler = this.wiki.getTiddler(this.editTitle);\\n\\t\\tif(tiddler) {\\n\\t\\t\\t// If we've got a tiddler, the value to display is the field string value\\n\\t\\t\\tvalue = tiddler.getFieldString(this.editField);\\n\\t\\t} else {\\n\\t\\t\\t// Otherwise, we need to construct a default value for the editor\\n\\t\\t\\tswitch(this.editField) {\\n\\t\\t\\t\\tcase \\\"text\\\":\\n\\t\\t\\t\\t\\tvalue = \\\"Type the text for the tiddler '\\\" + this.editTitle + \\\"'\\\";\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"title\\\":\\n\\t\\t\\t\\t\\tvalue = this.editTitle;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tvalue = \\\"\\\";\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tif (this.editDefault !== undefined) {\\n\\t\\t\\t\\tvalue = this.editDefault;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tupdate = function(value) {\\n\\t\\t\\tvar tiddler = self.wiki.getTiddler(self.editTitle),\\n\\t\\t\\t\\tupdateFields = {\\n\\t\\t\\t\\t\\ttitle: self.editTitle\\n\\t\\t\\t\\t};\\n\\t\\t\\tupdateFields[self.editField] = value;\\n\\t\\t\\tself.wiki.addTiddler(new $tw.Tiddler(self.wiki.getCreationFields(),tiddler,updateFields,self.wiki.getModificationFields()));\\n\\t\\t};\\n\\t}\\n\\treturn {value: value, update: update};\\n};\\n\\nEditHtmlWidget.prototype.getAttribute = function () {\\n\\t//parameters are passed to parent so get them from there\\n\\treturn this.parentWidget.getAttribute.apply(this.parentWidget, arguments);\\n}\\n \\nEditHtmlWidget.prototype.execute = function() {\\n\\tthis.editTitle = this.getAttribute(\\\"tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n\\tthis.editField = this.getAttribute(\\\"field\\\",\\\"text\\\");\\n\\tthis.editIndex = this.getAttribute(\\\"index\\\");\\n\\tthis.editDefault = this.getAttribute(\\\"default\\\");\\n\\tthis.editClass = this.getAttribute(\\\"class\\\");\\n\\tthis.editPlaceholder = this.getAttribute(\\\"placeholder\\\");\\n\\tthis.editFocusPopup = this.getAttribute(\\\"focusPopup\\\");\\n\\tthis.onkeyupdate = this.getAttribute(\\\"onkeyupdate\\\",\\\"yes\\\"); \\n\\t// Get the content type of the thing we're editing\\n\\tthis.edittype = \\\"\\\";\\n\\tif(this.editField === \\\"text\\\") {\\n\\t\\tvar tiddler = this.wiki.getTiddler(this.editTitle);\\n\\t\\tif(tiddler) {\\n\\t\\t\\tthis.edittype = tiddler.fields.type;\\n\\t\\t}\\n\\t}\\n\\t// only textarea can be visually edited\\n\\tthis.editTag = \\\"textarea\\\"\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nEditHtmlWidget.prototype.refresh = function(changedTiddlers) {\\n// attribute changes are caught by parent widget\\n\\tif(changedTiddlers[this.editTitle]) {\\n\\t\\t//this.refreshSelf(); BJ maybe we don't like to have our edits pulled - this could be an option\\n\\t\\t//return true;\\n\\t}\\n\\treturn false;\\n};\\n\\n/*\\nUpdate the editor with new text. This method is separate from updateEditorDomNode()\\nso that subclasses can override updateEditor() and still use updateEditorDomNode()\\n*/\\nEditHtmlWidget.prototype.updateEditor = function(text) {\\n\\tthis.updateEditorDomNode(text);\\n};\\n\\n/*\\nUpdate the editor dom node with new text\\n*/\\nEditHtmlWidget.prototype.updateEditorDomNode = function(text) {\\n\\t// Replace the edit value if the tiddler we're editing has changed\\n\\tvar domNode = this.domNodes[0].firstChild;\\n\\tif(!domNode.isTiddlyWikiFakeDom) {\\n\\t\\tif(this.document.activeElement !== domNode) {\\n\\t\\t\\tdomNode.value = text;\\n\\t\\t}\\n\\t\\t// Fix the height if needed\\n\\t\\t//this.fixHeight();\\n\\t}\\n};\\n\\n/*\\nHandle a dom \\\"input\\\" event\\n*/\\nEditHtmlWidget.prototype.handleInputEvent = function(event) {\\n\\tthis.saveChanges(this.domNodes[0].firstChild.value);\\n\\t//this.fixHeight();\\n\\treturn true;\\n};\\n\\nEditHtmlWidget.prototype.handleFocusEvent = function(event) {\\n\\tif(this.editFocusPopup) {\\n\\t\\t$tw.popup.triggerPopup({\\n\\t\\t\\tdomNode: this.domNodes[0].firstChild,\\n\\t\\t\\ttitle: this.editFocusPopup,\\n\\t\\t\\twiki: this.wiki,\\n\\t\\t\\tforce: true\\n\\t\\t});\\n\\t}\\n\\treturn true;\\n};\\n\\nEditHtmlWidget.prototype.saveChanges = function(text) {\\n\\tvar editInfo = this.getEditInfo();\\n\\tif(text !== editInfo.value) {\\n\\t\\teditInfo.update(text);\\n\\t}\\n};\\n\\n$tw.utils.registerFileType(\\\"text/x-perimental\\\",\\\"utf8\\\",\\\".perimental\\\");\\nexports[\\\"__!ckebase__\\\"] = EditHtmlWidget;//choose an unparseable name to make widget 'private'\\n\\n//-------------- base initialisation - ----------------\\n\\nvar startup =  function () { //do after lib is loaded\\n\\tif (typeof CKEDITOR != 'undefined')   {\\n\\t\\tvar PLUSMODE  = (typeof $tw.wiki.getTiddler(\\\"$:/language/Docs/Types/text/x-perimental\\\")!='undefined');\\n\\n\\t\\tvar sty;\\n\\t\\ttry {\\n\\t\\t sty=$tw.wiki.getTiddlerData(\\\"$:/plugins/bj/visualeditor/styles.json\\\");\\n\\t\\t} catch(e){ \\n\\t\\t\\talert(\\\"invalid style format\\\");\\n\\t\\t\\tsty=[];\\n\\t\\t}\\n\\t\\tif (PLUSMODE) sty.push({ \\\"name\\\": \\\"verbatim\\\",\\\"element\\\": \\\"span\\\",\\\"attributes\\\": {\\\"class\\\": \\\"verbatim\\\"}});\\n\\n\\t\\tCKEDITOR.stylesSet.add( 'default',sty);\\n\\t\\tif (PLUSMODE) CKEDITOR.addCss($tw.wiki.getTiddlerData(\\\"$:/plugins/bj/visualeditor/verbatim.json\\\").verbatim);\\n\\t\\tCKEDITOR.on( 'instanceReady', function( ev ) {\\n\\t\\t\\tvar blockTags = ['div','h1','h2','h3','h4','h5','h6','p','pre','li','blockquote','ul','ol',\\n\\t\\t\\t\\t\\t\\t\\t'table','thead','tbody','tfoot','td','th',];\\n\\t\\t\\tvar rules = {\\n\\t\\t\\t\\tindent : false,\\n\\t\\t\\t\\tbreakBeforeOpen : true,\\n\\t\\t\\t\\tbreakAfterOpen : false,\\n\\t\\t\\t\\tbreakBeforeClose : false,\\n\\t\\t\\t\\tbreakAfterClose : false\\n\\t\\t\\t};\\n\\n\\t\\t\\tfor (var i=0; i<blockTags.length; i++) {\\n\\t\\t\\t\\tev.editor.dataProcessor.writer.setRules( blockTags[i], rules );\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\t//BJ hide tw5 tags and macros from ckeditor\\n\\t\\tCKEDITOR.config.protectedSource.push(/<\\\\/?\\\\$[^<]*\\\\/?>/g);\\n\\t\\tCKEDITOR.config.protectedSource.push(/<<[^<]*>>/g);\\n\\t\\t//CKEDITOR. config.protectedSource.push(/<\\\\?[\\\\s\\\\S]*?\\\\?>/g); // PHP Code\\n\\t\\tCKEDITOR.config.protectedSource.push(/<code>[\\\\s\\\\S]*?<\\\\/code>/gi); // Code tags\\n\\t\\tCKEDITOR.config.entities = false;\\n\\t}\\n\\n\\tvar atiddler = $tw.wiki.getTiddler(\\\"$:/config/EditorTypeMappings/text/html\\\");\\n\\tif (atiddler == undefined) {\\n\\t\\t\\t\\t$tw.wiki.addTiddler(new $tw.Tiddler($tw.wiki.getCreationFields(),\\n\\t\\t\\t\\t{title:\\\"$:/config/EditorTypeMappings/text/html\\\", text:\\\"html\\\"}));\\n\\t}\\n\\tatiddler = $tw.wiki.getTiddler(\\\"$:/config/EditorTypeMappings/text/x-perimental\\\");\\n\\tif (atiddler == undefined) {\\t\\n\\t\\t\\t\\t$tw.wiki.addTiddler(new $tw.Tiddler($tw.wiki.getCreationFields(),\\n\\t\\t\\t\\t\\t{title:\\\"$:/config/EditorTypeMappings/text/x-perimental\\\", text:\\\"x-perimental\\\"}));\\n\\t}\\n}\\n\\n//require(\\\"$:/plugins/bj/visualeditor/ckeditor.js\\\"); BJ -option to build in the lib?\\n/*\\ncreate lib loader \\n*/\\nif($tw.browser)  {\\n\\tvar head = document.getElementsByTagName('head')[0];\\n\\tvar js = document.createElement(\\\"script\\\");\\n\\tjs.type = \\\"text/javascript\\\";\\n\\tjs.onload = function() {  \\n\\t\\t//do non-tree initialisation\\n\\t\\tstartup();\\n\\t\\tready = true;//BJ do this in startup\\n\\t\\t//broadcast ready message\\n\\t\\t$tw.wiki.setTextReference(\\\"$:/temp/ckeready\\\",\\\"ready\\\");\\n\\t}\\n\\tif (window.location.hostname == \\\"bjtools.tiddlyspot.com\\\") {\\n\\t\\tjs.src = $tw.wiki.getTiddlerText(\\\"$:/plugin/bj/visualeditor/bjtools/lib\\\")||\\\"\\\";\\n\\t}\\n\\telse {\\n\\t\\tvar tiddler = $tw.wiki.getTiddler(\\\"$:/plugin/bj/visualeditor/includelib\\\")||{fields:{}};\\n\\t\\tvar src = (tiddler.fields.text)||\\\"\\\";\\n\\t\\tjs.src = src.replace(/.*?<script.*?src=[\\\"'](.*?)[\\\"'][\\\\s\\\\S]*/,\\\"$1\\\");\\n\\t\\tif (tiddler.fields.tags) {\\n\\t\\t\\tvar pos = tiddler.fields.tags.indexOf(\\\"$:/core/wiki/rawmarkup\\\");\\n\\t\\t\\tif(pos !== -1) {\\n\\t\\t\\t\\talert(\\\"Please remove the tag $:/core/wiki/rawmarkup from tiddler $:/plugin/bj/visualeditor/includelib\\\")\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\thead.appendChild(js);\\n} \\n//----------------base initialisation finished-----------------------------\\n\\nvar LoadWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n \\nLoadWidget.prototype = new Widget();\\n\\n\\n\\nLoadWidget.prototype.getLoadingMessage = function() {\\n\\tvar message = \\\"<h2>loading ckeditor\\\",\\n\\t\\tparser = this.wiki.parseText(\\\"text/vnd.tiddlywiki\\\",message,{parseAsInline: true});\\n\\tif(parser) {\\n\\t\\treturn parser.tree;\\n\\t} else {\\n\\t\\treturn [];\\n\\t}\\n};\\n \\nLoadWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n\\nLoadWidget.prototype.execute = function() {\\n\\n\\tif (ready) {\\n\\t\\t// insert the real widget\\n\\t\\tthis.makeChildWidgets([{type: \\\"__!ckebase__\\\"}]);\\n\\t}\\n\\telse this.makeChildWidgets(this.getLoadingMessage());\\n};\\n\\nLoadWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\t// Refresh if an attribute has changed, or the 'lib is loaded' is indicated\\n\\t\\tif(Object.keys(changedAttributes).length || changedTiddlers[\\\"$:/temp/ckeready\\\"]) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\treturn this.refreshChildren(changedTiddlers);\\t\\t\\n\\t}\\n};\\n\\nLoadWidget.prototype.invokeAction = function(triggeringWidget,event) {\\n\\tthis.invokeActions(this,event);\\n\\treturn true; // Action was invoked\\n};\\n\\nexports[\\\"edit-html\\\"] = LoadWidget;\\nexports[\\\"edit-x-perimental\\\"] = LoadWidget;\\n})();\\n}\\n\",\n            \"title\": \"$:/bj/modules/widgets/edit.js\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"widget\"\n        },\n        \"$:/plugins/bj/visualeditor/styles.json\": {\n            \"type\": \"application/json\",\n            \"title\": \"$:/plugins/bj/visualeditor/styles.json\",\n            \"module-type\": \"library\",\n            \"text\": \"[\\n\\t{ \\\"name\\\": \\\"Blue Title\\\",     \\\"element\\\": \\\"h3\\\",      \\\"styles\\\": { \\\"color\\\": \\\"Blue\\\" } },\\n\\t{ \\\"name\\\": \\\"Red Title\\\",      \\\"element\\\": \\\"h3\\\",      \\\"styles\\\": { \\\"color\\\": \\\"Red\\\" } },\\n\\t{ \\\"name\\\": \\\"Marker: Yellow\\\",\\t\\\"element\\\": \\\"span\\\",    \\\"styles\\\": { \\\"background-color\\\": \\\"Yellow\\\"} },\\n\\t{ \\\"name\\\": \\\"Marker: Red\\\",\\t\\\"element\\\": \\\"span\\\",    \\\"styles\\\": { \\\"background-color\\\": \\\"Red\\\"} },\\n\\t{ \\\"name\\\": \\\"Marker: Green\\\",\\t\\\"element\\\": \\\"span\\\",    \\\"styles\\\": { \\\"background-color\\\": \\\"Lime\\\" } }\\n]\\n\\n\"\n        },\n        \"$:/plugins/bj/visualeditor/config.json\": {\n            \"type\": \"application/json\",\n            \"title\": \"$:/plugins/bj/visualeditor/config.json\",\n            \"module-type\": \"library\",\n            \"text\": \"{\\n\\\"removePlugins\\\":\\\"smiley,wsc,scayt,forms,save,preview,print\\\",\\n\\\"customConfig\\\":\\\"\\\",\\n\\\"language\\\" : \\\"en\\\",\\n\\\"defaultLanguage\\\" : \\\"en\\\",\\n\\\"contentsCss\\\" : \\\"\\\",\\n\\\"disableNativeSpellChecker\\\" : false,\\n\\\"resize_enabled\\\" : true,\\n\\\"toolbarGroups\\\":[{ \\\"name\\\": \\\"clipboard\\\", \\\"groups\\\": [ \\\"clipboard\\\", \\\"undo\\\" ] },\\n\\t\\t{ \\\"name\\\": \\\"editing\\\", \\\"groups\\\": [ \\\"find\\\", \\\"selection\\\", \\\"spellchecker\\\", \\\"editing\\\" ] },\\n\\t\\t{ \\\"name\\\": \\\"links\\\", \\\"groups\\\": [ \\\"links\\\" ] },\\n\\t\\t{ \\\"name\\\": \\\"insert\\\", \\\"groups\\\": [ \\\"insert\\\" ] },\\n\\t\\t{ \\\"name\\\": \\\"forms\\\", \\\"groups\\\": [ \\\"forms\\\" ] },\\n\\t\\t{ \\\"name\\\": \\\"tools\\\", \\\"groups\\\": [ \\\"tools\\\" ] },\\n\\t\\t{ \\\"name\\\": \\\"document\\\", \\\"groups\\\": [ \\\"mode\\\", \\\"document\\\", \\\"doctools\\\" ] },\\n\\t\\t{ \\\"name\\\": \\\"others\\\", \\\"groups\\\": [ \\\"others\\\" ] },\\n\\t\\t{ \\\"name\\\": \\\"about\\\", \\\"groups\\\": [ \\\"about\\\" ] },\\n\\t\\t{ \\\"name\\\": \\\"basicstyles\\\", \\\"groups\\\": [ \\\"basicstyles\\\", \\\"cleanup\\\" ] },\\n\\t\\t{ \\\"name\\\": \\\"paragraph\\\", \\\"groups\\\": [ \\\"list\\\", \\\"indent\\\", \\\"blocks\\\", \\\"align\\\", \\\"bidi\\\", \\\"paragraph\\\" ] },\\n\\t\\t{ \\\"name\\\": \\\"styles\\\", \\\"groups\\\": [ \\\"styles\\\" ] },\\n\\t\\t{ \\\"name\\\": \\\"colors\\\", \\\"groups\\\": [ \\\"colors\\\" ] }\\n\\t] \\n}\\n\"\n        },\n        \"$:/plugins/bj/visualeditor/verbatim.json\": {\n            \"type\": \"application/json\",\n            \"title\": \"$:/plugins/bj/visualeditor/verbatim.json\",\n            \"module-type\": \"library\",\n            \"text\": \"{\\n\\\"verbatim\\\":\\\".verbatim{background-color: red;border:2px solid;}\\\"\\n}\\n\"\n        },\n        \"$:/plugin/bj/visualeditor/includelib\": {\n            \"title\": \"$:/plugin/bj/visualeditor/includelib\",\n            \"description\": \"load the external lib\",\n            \"text\": \"<script src='http://127.0.0.1/libs/ckeditor/ckeditor.js'></script>\\n\\n\"\n        },\n        \"$:/plugin/bj/visualeditor/bjtools/lib\": {\n            \"title\": \"$:/plugin/bj/visualeditor/bjtools/lib\",\n            \"description\": \"load the external lib from web\",\n            \"text\": \"http://cdnjs.cloudflare.com/ajax/libs/ckeditor/4.3.2/ckeditor.js\\n\"\n        },\n        \"$:/plugins/bj/visualeditor/readme\": {\n            \"title\": \"$:/plugins/bj/visualeditor/readme\",\n            \"text\": \"!!!Basic Configuration\\nThis plugin enables ckeditor to be used in a tiddlywiki. For the Ckeditor license see http://ckeditor.com/about/license\\n\\nckeditor can be used directly from the web, eg http://cdnjs.cloudflare.com/ajax/libs/ckeditor/4.3.2/ckeditor.js\\nor can be obtained directly from http://ckeditor.com/download\\n\\nNote that this plugin is designed to work with the ckeditor standard packages (but can be configured for custom packages).\\n\\nThe tiddler $:/plugin/bj/visualeditor/includelib\\n\\nneeds to contain the location of the ckeditor library. The default is\\n\\n```\\nhttp://127.0.0.1/libs/ckeditor/ckeditor.js\\n```\\nchange to your location. Note that this can be an online location eg\\n\\n```\\nhttp://cdnjs.cloudflare.com/ajax/libs/ckeditor/4.3.2/ckeditor.js\\n\\n```\\n\\n!!!Advanced configuration\\nConfiguration options as described on the ckeditor website can be set in the tiddler \\n$:/plugins/bj/visualeditor/config.json\\nUser styles (also described on the ckeditor website) are included in the tiddler \\n$:/plugins/bj/visualeditor/styles.json\\n\"\n        },\n        \"$:/language/Docs/Types/text/x-htmlp\": {\n            \"title\": \"$:/language/Docs/Types/text/x-htmlp\",\n            \"description\": \"ckeditor usage\",\n            \"name\": \"text/x-htmlp\",\n            \"group\": \"Text\"\n        },\n        \"$:/config/EditorTypeMappings/text/x-htmlp\": {\n            \"title\": \"$:/config/EditorTypeMappings/text/x-htmlp\",\n            \"text\": \"html\"\n        }\n    }\n}","author":"JeffreyWilkinson","bag":"default","core-version":">=5.1.11","dependents":"","description":"ckeditor adapter plugin","list":"readme","plugin-type":"plugin","revision":"0","source":"https://github.com/buggyj/TW5-tools","title":"$:/plugins/bj/visualeditor","version":"1.11.0","name":"visualeditor"}