{"type":"application/json","text":"{\n    \"tiddlers\": {\n        \"$:/plugins/gsd5/ticklers/modules/startup/tickler.js\": {\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/gsd5/ticklers/modules/startup/tickler.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nTickler alert manager.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"tickler\\\";\\n//exports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"story\\\"];\\nexports.synchronous = true;\\n\\nexports.startup = function() {\\n    $tw.wiki.forEachTiddler(checkForAlert);\\n    var interval = setInterval(function() {\\n        $tw.wiki.forEachTiddler(checkForAlert);\\n    }, 90000);\\n};\\n\\nfunction checkForAlert(title, tiddler) {\\n    var now = new Date();\\n    if(!tiddler) {\\n        return;\\n    }\\n    if(tiddler.fields.gsd_type === \\\"action\\\") {\\n        if(tiddler.fields.gsd_tickdate) {\\n            var alert_date = $tw.utils.parseDate(tiddler.fields.gsd_tickdate);\\n            if(alert_date <= now) {\\n                var alertTiddler = new $tw.Tiddler({\\n                    \\\"title\\\": \\\"$:/temp/alert/\\\" + title,\\n                    \\\"modified\\\": tiddler.fields.gsd_tickdate,\\n                    \\\"component\\\": title,\\n                    \\\"text\\\": \\\"[[Go to Action|\\\" + title + \\\"]]\\\",\\n                    \\\"tags\\\": \\\"$:/tags/Alert\\\"\\n                });\\n                $tw.wiki.addTiddler(alertTiddler);\\n                clearTickdate(tiddler);\\n            }\\n        }\\n    }\\n}\\n\\n/* Current we must clear the gsd_tickdate field to avoid the recreation of ticklers after the user has deleted the tickler. */\\nfunction clearTickdate(tiddler) {\\n    $tw.wiki.addTiddler(new $tw.Tiddler(tiddler,{\\\"gsd_tickdate\\\":undefined}));\\n}\\n\\n})();\\n\",\n            \"title\": \"$:/plugins/gsd5/ticklers/modules/startup/tickler.js\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"startup\"\n        },\n        \"$:/plugins/gsd5/ticklers/modules/widgets/datepicker.js\": {\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/gsd5/ticklers/modules/widgets/datepicker.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nDate Picker Widget\\n\\n\\\\*/\\n(function() {\\n\\n// jslint node: true, browser: true\\n// global $tw: false\\n\\\"use_strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar DateWidget = function(parseTreeNode, options) {\\n    this.initialise(parseTreeNode, options);\\n};\\n\\n// Inherit from Widget\\nDateWidget.prototype = new Widget();\\n\\n/*\\n * Render the DOM of the DatePicker widget.\\n */\\nDateWidget.prototype.render = function(parent, nextSibling) {\\n    var self = this;\\n    this.calendar = new Calendar();\\n    this.parentDomNode = parent;\\n    this.computeAttributes();\\n    this.execute();\\n    // Create DOM element\\n    this.domNode = this.document.createElement(\\\"div\\\");\\n    this.domNode.setAttribute(\\\"class\\\", \\\"tw-calendar\\\");\\n    this.inputNode = this.document.createElement(\\\"input\\\");\\n    this.getField();\\n    // Create event listeners\\n    // When the input field is selected, show the floating calendar.\\n    this.inputNode.addEventListener(\\n        \\\"focus\\\",\\n        function(event) {\\n            self.calendar.show();\\n        }, true\\n    );\\n    /*\\n     * When editing the field manually, hitting Enter will save the date to\\n     * the tiddler field specified.  Attempted other means, 'blur' and tried to\\n     * include 'tab' cannot get the updates to work correctly.\\n     */\\n    this.inputNode.addEventListener(\\n        \\\"keypress\\\",\\n        function(event) {\\n            if(event.keyCode === 13) {\\n                self.handleChange();\\n            }\\n        }, true\\n    );\\n    /*\\n     * Watch for click outside the calendar that loses focus and hides the\\n     * calendar.\\n     */\\n    this.document.addEventListener(\\n        'click',\\n        function(event) {\\n            self.calendar.isOutsideCalendar(event);\\n        },false\\n    );\\n    this.domNode.appendChild(this.inputNode);\\n    this.calendar.build(this);\\n    // Insert element\\n    parent.insertBefore(this.domNode, nextSibling);\\n    this.renderChildren(this.domNode, null);\\n    this.domNodes.push(this.domNode);\\n};\\n\\n/*\\n * Called when the input field is changed.\\n */\\nDateWidget.prototype.handleChange = function(event) {\\n    var date_obj = this.validate();\\n    if(!date_obj) {\\n        this.getField();\\n        return;\\n        if(this.inputNode.value === \\\"\\\") {\\n            return;\\n        }\\n    }\\n    this.setField(date_obj);\\n    $tw.rootWidget.dispatchEvent({type: \\\"tm-auto-save-wiki\\\"});\\n};\\n\\n/*\\n * Validate the value of the input field.  Return empty string if invalid\\n * date values.  ISO/UTC date string YYYY-MM-DD.\\n */\\nDateWidget.prototype.validate = function() {\\n    var split_string = this.inputNode.value.split(\\\"-\\\");\\n    var year = parseInt(split_string[0]);\\n    var month = parseInt(split_string[1]);\\n    var day = parseInt(split_string[2]);\\n    // Check to see if any of the values are not a number.\\n    if(isNaN(year) || isNaN(month) || isNaN(day)) {\\n        this.inputNode.value = \\\"\\\";\\n        return;\\n    }\\n    // Check number values are within limits.\\n    if(month < 1 || month > 12) {\\n        this.inputNode.value = \\\"\\\";\\n        return;\\n    }\\n    var day_upperLimit = this.calendar.gDayCounts[month-1]\\n    if(month === 2 && year%4 === 0) { // Leap year\\n        day_upperLimit = 29;\\n    }\\n    if(day < 1 || day > day_upperLimit) {\\n        this.inputNode.value = \\\"\\\";\\n        return;\\n    }\\n    // Return date_object if string is good.\\n    var date_obj = new Date(this.inputNode.value);\\n    return date_obj;\\n};\\n\\n/*\\n * Set the specified field to aTiddlyWiki5 UTC string.\\n */\\nDateWidget.prototype.setField = function(date_obj) {\\n    this.wiki.setText(this.dateTitle, this.dateField, null, $tw.utils.stringifyDate(date_obj));\\n};\\n\\n/*\\n * Get TiddlyWiki5 UTC string from the specified field, update the calendar\\n * and input field.\\n */\\nDateWidget.prototype.getField = function() {\\n    var tiddler = this.wiki.getTiddler(this.dateTitle);\\n    if(tiddler) {\\n        var date_string = tiddler.getFieldString(this.dateField);\\n        if(date_string === \\\"\\\" && this.inputNode.value === \\\"\\\") {\\n            this.calendar.date_info = this.calendar.getDateInfo();\\n            return;\\n        }\\n        var date_obj = $tw.utils.parseDate(date_string);\\n        this.calendar.date_info = this.calendar.getDateInfo(date_obj);\\n        this.inputNode.value = this.calendar.createSimpleUTCDate(this.calendar.date_info);\\n    } else {\\n        this.inputNode.value = \\\"\\\";\\n    }\\n};\\n\\n/*\\n * Compute the internal state of the widget\\n */\\nDateWidget.prototype.execute = function() {\\n    this.dateTitle = this.getAttribute(\\\"tiddler\\\",this.getVariable(\\\"currentTiddler\\\"));\\n    this.dateField = this.getAttribute(\\\"field\\\");\\n    this.makeChildWidgets();\\n};\\n\\n/*\\n * Selectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n */\\nDateWidget.prototype.refresh = function(changedTiddlers) {\\n    var changedAttributes = this.computeAttributes();\\n    // Refresh if an attribute has changed, or the type associated with the target tiddler has changed\\n    if(changedAttributes.tiddler || changedAttributes.field) {\\n        this.refreshSelf();\\n        return true;\\n    } else {\\n        return this.refreshChildren(changedTiddlers);\\n    }\\n};\\n\\n\\n/*\\n * The Calendar class isolates the calendar functions from the widget functions.\\n */\\nvar Calendar = function() {\\n    this.enGMonth = [\\\"JAN\\\", \\\"FEB\\\", \\\"MAR\\\", \\\"APR\\\", \\\"MAY\\\", \\\"JUN\\\", \\\"JUL\\\", \\\"AUG\\\", \\\"SEP\\\", \\\"OCT\\\", \\\"NOV\\\", \\\"DEC\\\"];\\n    this.enGWeekDay = [\\\"S\\\", \\\"M\\\", \\\"T\\\", \\\"W\\\", \\\"T\\\", \\\"F\\\", \\\"S\\\"];\\n    this.gDayCounts = [\\\"31\\\", \\\"28\\\", \\\"31\\\", \\\"30\\\", \\\"31\\\", \\\"30\\\", \\\"31\\\", \\\"31\\\", \\\"30\\\", \\\"31\\\", \\\"30\\\", \\\"31\\\"];\\n};\\n\\n/*\\n * Build the DOM for the calendar.\\n */\\nCalendar.prototype.build = function(widget) {\\n    var self = this;\\n    this.widget = widget;\\n    // Create calendar table\\n    this.calendarNode = this.widget.document.createElement(\\\"table\\\");\\n    this.calendarNode.setAttribute(\\\"class\\\", \\\"tw-calendar-popup\\\");\\n    this.calendarNode.setAttribute(\\\"cellpadding\\\", \\\"2\\\");\\n    this.widget.domNode.appendChild(this.calendarNode);\\n    // Create top row\\n    this.topRowNode = this.widget.document.createElement(\\\"thead\\\");\\n    this.navLeftNode = this.widget.document.createElement(\\\"th\\\");\\n    this.navLeftNode.setAttribute(\\\"class\\\", \\\"tw-calendar-left\\\");\\n    this.navLeftNode.innerHTML = \\\"<\\\";\\n    this.topRowNode.appendChild(this.navLeftNode);\\n    // Listener for month navigation\\n    this.navLeftNode.addEventListener(\\\"click\\\", function(event) {\\n        self.navMonth(true);\\n    });\\n    this.navCenterNode = this.widget.document.createElement(\\\"th\\\");\\n    this.navCenterNode.setAttribute(\\\"class\\\", \\\"tw-calendar-title\\\");\\n    this.navCenterNode.setAttribute(\\\"colspan\\\", \\\"5\\\");\\n    this.topRowNode.appendChild(this.navCenterNode);\\n    this.navRightNode = this.widget.document.createElement(\\\"th\\\");\\n    this.navRightNode.setAttribute(\\\"class\\\", \\\"tw-calendar-right\\\");\\n    this.navRightNode.innerHTML = \\\">\\\";\\n    this.topRowNode.appendChild(this.navRightNode);\\n    // Listener for month navigation\\n    this.navRightNode.addEventListener(\\\"click\\\", function(event) {\\n        self.navMonth(false);\\n    });\\n    this.calendarNode.appendChild(this.topRowNode);\\n    // Create weekday row\\n    this.dateRowNode = this.widget.document.createElement(\\\"thead\\\");\\n    this.dateRowNode.setAttribute(\\\"class\\\", \\\"tw-calendar-dayrow\\\");\\n    for(var x = 0; x < this.enGWeekDay.length; x++) {\\n        dayNode = this.widget.document.createElement(\\\"th\\\");\\n        dayNode.innerHTML = this.enGWeekDay[x];\\n        this.dateRowNode.appendChild(dayNode);\\n    }\\n    this.calendarNode.appendChild(this.dateRowNode);\\n    // Create day grid\\n    this.dayGridNode = this.widget.document.createElement(\\\"tbody\\\");\\n    this.dayGrid = [];\\n    for(var y = 0; y < 6; y++) {\\n        weekRow = this.widget.document.createElement(\\\"tr\\\");\\n        for(var x = 0; x < 7; x++) {\\n            dayNode = this.widget.document.createElement(\\\"td\\\");\\n            var d = ((y*7)+x);\\n            dayNode.innerHTML = \\\"&nbsp;\\\"\\n            this.dayGrid.push(dayNode);\\n            weekRow.appendChild(dayNode);\\n        }\\n        this.dayGridNode.appendChild(weekRow);\\n    }\\n    this.calendarNode.appendChild(this.dayGridNode);\\n    // Add listener for day select\\n    this.dayGridNode.addEventListener(\\\"click\\\", function(event) {\\n        if(event.target.innerHTML === \\\"&nbsp;\\\") {\\n            return;\\n        }\\n        self.setInput(parseInt(event.target.innerHTML));\\n        self.widget.handleChange();\\n        self.hide();\\n    });\\n    this.getInput();\\n};\\n\\n/*\\n * Determine the position for the floating calendar for rendering just below\\n * the input box.\\n */\\nCalendar.prototype.setPosition = function() {\\n    var x = this.widget.inputNode.offsetLeft;\\n    var y = this.widget.inputNode.offsetHeight;\\n    this.calendarNode.style[\\\"left\\\"] = x;\\n    this.calendarNode.style[\\\"top\\\"] = y;\\n};\\n\\n/*\\n * Is the click from the mouse outside the floating calendar?\\n */\\nCalendar.prototype.isOutsideCalendar = function(event) {\\n    var child = event.target;\\n    var parent = this.calendarNode;\\n    if(child === this.widget.inputNode) {\\n        return;\\n    }\\n    if(!this.isChild(child, parent)) {\\n        this.hide();\\n    }\\n};\\n\\n/*\\n * Is the child a child of the parent?\\n */\\nCalendar.prototype.isChild = function(child, parent) {\\n    while(child) {\\n        if(child === parent) {\\n            return true;\\n        }\\n        child = child.offsetParent;\\n    }\\n    return false;\\n};\\n\\n/*\\n * Fill the calendar with text for the month displayed.\\n */\\nCalendar.prototype.fillCalendar = function() {\\n    this.navCenterNode.innerHTML = this.enGMonth[this.date_info.selectedMonth] + \\\" \\\" + this.date_info.selectedYear.toString();\\n    var dayCount = 0;\\n    var lastDayCount = parseInt(this.gDayCounts[this.date_info.selectedMonth])+parseInt(this.date_info.firstDayOfMonth)-1;\\n    if(this.date_info.selectedYear%4 === 0 && this.date_info.selectedMonth === 1) {\\n        lastDayCount = parseInt(this.gDayCounts[this.date_info.selectedMonth])+parseInt(this.date_info.firstDayOfMonth);\\n    }\\n    for(var x = 0; x < 42; x++) {\\n        if(x < this.date_info.firstDayOfMonth || x > lastDayCount) {\\n            var dayBlock = this.dayGrid[x];\\n            dayBlock.setAttribute(\\\"class\\\", \\\"tw-calendar-nodate\\\");\\n            dayBlock.innerHTML = \\\"&nbsp;\\\";\\n        } else {\\n            var dayBlock = this.dayGrid[x];\\n            dayBlock.setAttribute(\\\"class\\\", \\\"tw-calendar-date\\\");\\n            ++dayCount;\\n            var dayCountString = dayCount.toString();\\n            if(dayCountString.length < 2) {\\n                dayCountString = \\\"0\\\" + dayCountString;\\n            }\\n            dayBlock.innerHTML = dayCountString;\\n        }\\n    }\\n};\\n\\n/*\\n * Create a custom date object used to track date changes and fill the calendar.\\n */\\nCalendar.prototype.getDateInfo = function(input) {\\n    var now = new Date(),\\n        firstDay = new Date(),\\n        returnObj = {};\\n    if(typeof(input) === \\\"string\\\") {\\n        now = new Date(input);\\n        firstDay = new Date(input);\\n    }\\n    if(typeof(input) === \\\"object\\\") {\\n        now = input;\\n        firstDay = new Date(input);\\n    }\\n    firstDay.setUTCDate(1);\\n    returnObj.selectedYear = now.getUTCFullYear();\\n    returnObj.selectedMonth = now.getUTCMonth();\\n    returnObj.selectedDay = now.getUTCDate();\\n    returnObj.firstDayOfMonth = firstDay.getUTCDay();\\n    return returnObj;\\n};\\n\\n/*\\n * Set the input field in accordance to current date_info object.\\n */\\nCalendar.prototype.setInput = function(selectedDay) {\\n    if(isNaN(selectedDay)) {\\n        return;\\n    }\\n    this.date_info.selectedDay = selectedDay;\\n    this.widget.inputNode.value = this.createSimpleUTCDate();\\n};\\n\\n/*\\n * Get the value of the input field and update the date_info object to match.\\n */\\nCalendar.prototype.getInput = function() {\\n    if(this.widget.inputNode.value === \\\"\\\") {\\n        this.date_info = this.getDateInfo();\\n    } else {\\n        this.date_info = this.getDateInfo(this.widget.inputNode.value);\\n    }\\n};\\n\\n/*\\n * Move forward or backwards in the calendar.\\n */\\nCalendar.prototype.navMonth = function(direction) {\\n    if(direction) {\\n        this.date_info.selectedMonth = this.date_info.selectedMonth - 1;\\n        if(this.date_info.selectedMonth < 0) {\\n            this.date_info.selectedMonth = 11;\\n            this.date_info.selectedYear = this.date_info.selectedYear - 1;\\n        }\\n    } else {\\n        this.date_info.selectedMonth = this.date_info.selectedMonth + 1;\\n        if(this.date_info.selectedMonth > 11) {\\n            this.date_info.selectedMonth = 0;\\n            this.date_info.selectedYear = this.date_info.selectedYear + 1;\\n        }\\n    }\\n\\n    this.date_info = this.getDateInfo(this.createSimpleUTCDate());\\n    this.fillCalendar();\\n};\\n\\n/*\\n * Convert UTC Date object to human-readable UTC Date string,\\n * have to add one to month value and pad with 0 if needed.\\n */\\nCalendar.prototype.createSimpleUTCDate = function() {\\n    var monthString = (this.date_info.selectedMonth+1).toString();\\n    var dayString = this.date_info.selectedDay.toString();\\n    if (monthString.length < 2) {\\n        var monthString = \\\"0\\\" + monthString;\\n    }\\n    if (dayString.length < 2) {\\n        var dayString = \\\"0\\\" + dayString;\\n    }\\n    return this.date_info.selectedYear.toString()\\n        + \\\"-\\\"\\n        + monthString\\n        + \\\"-\\\"\\n        + dayString;\\n};\\n\\n/*\\n * Show the floating calendar.\\n */\\nCalendar.prototype.show = function() {\\n    this.setPosition();\\n    this.fillCalendar();\\n    this.calendarNode.style[\\\"display\\\"] = \\\"inherit\\\";\\n};\\n\\n/*\\n * Hide the floating calendar.\\n */\\nCalendar.prototype.hide = function() {\\n    this.calendarNode.style[\\\"display\\\"] = \\\"none\\\";\\n};\\n\\nexports.date = DateWidget;\\n\\n})();\\n\",\n            \"title\": \"$:/plugins/gsd5/ticklers/modules/widgets/datepicker.js\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"widget\"\n        },\n        \"$:/plugins/gsd5/ticklers/stylesheet/datepicker-stylesheet\": {\n            \"title\": \"$:/plugins/gsd5/ticklers/stylesheet/datepicker-stylesheet\",\n            \"tags\": \"$:/tags/Stylesheet\",\n            \"text\": \".tw-calendar {\\n  position: relative;\\n}\\n\\n.tw-calendar-popup {\\n  font-family: monospace;\\n  border-collapse: collapse;\\n  display: none;\\n  position: absolute;\\n  margin: 0;\\n  background-color: <<colour background>>;\\n  cursor: default;\\n  z-index: 10;\\n}\\n\\n.tw-calendar-date:hover {\\n  background-color: <<colour primary>>;\\n  color: #fff;\\n}\\n\\n.tw-calendar-left:hover {\\n  background-color: <<colour primary>>;\\n  color: #fff;\\n}\\n\\n.tw-calendar-right:hover {\\n  background-color: <<colour primary>>;\\n  color: #fff;\\n}\\n\\n/* Fix trashcan on alert title when body is empty. */\\n.tc-alert-subtitle {\\n  padding-right: 20px;\\n}\"\n        },\n        \"Tickler Dashboard\": {\n            \"title\": \"Tickler Dashboard\",\n            \"tags\": \"$:/tags/GSD5Review\",\n            \"text\": \"<<gsd5-list title:\\\"Active Ticklers\\\" gsd_type:\\\"action\\\" gsd_status:\\\"none\\\" gsd_complete:\\\"false\\\" realmAware:\\\"true\\\" sort:\\\"gsd_tickdate\\\" order:\\\"ascending\\\" customFilter:\\\"has[gsd_tickdate]\\\">>\\n\"\n        },\n        \"$:/plugins/gsd5/core/ui/addins/ViewTickler\": {\n            \"title\": \"$:/plugins/gsd5/core/ui/addins/ViewTickler\",\n            \"tags\": \"$:/tags/GSD5ActionPlugin\",\n            \"text\": \"<p>\\n    <div class=\\\"gsd-context-box\\\">\\n        <$set name=\\\"parentTiddler\\\" value=<<currentTiddler>>>\\n        <$set name=\\\"TicklerStatus\\\" value=<<qualify \\\"$:/state/popup/tickler\\\">>>\\n            <$button popup=<<TicklerStatus>> class=\\\"tc-btn-invisible gsd-context-button\\\">+ Ticklers</$button>\\n            <$reveal state=<<TicklerStatus>> type=\\\"nomatch\\\" text=\\\"\\\" class=\\\"tc-popup-handle\\\" default=\\\"\\\" retain=\\\"yes\\\" animate=\\\"yes\\\">\\n            <div class=\\\"tc-menu-list-subitem\\\">\\n\\n            Tickler Date:\\n            <$date field=\\\"gsd_tickdate\\\"/>\\n\\n            Frequency:<br/>\\n            <$edit field=\\\"gsd_tickfreq\\\"/> //days//\\n\\n            </div>\\n            </$reveal>\\n        </$set>\\n        </$set>\\n    </div>\\n</p>\"\n        }\n    }\n}","author":"Roma Hicks","core-version":">=5.1.8","dependents":"","description":"GSD5 Tickler plugin","list":"readme","plugin-type":"plugin","title":"$:/plugins/gsd5/ticklers","version":"0.6-beta","name":"ticklers"}